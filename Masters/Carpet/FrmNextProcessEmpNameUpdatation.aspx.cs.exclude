using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Data;
using System.Data.SqlClient;

public partial class Masters_Carpet_FrmNextProcessEmpNameUpdatation : CustomPage
{
    protected void Page_Load(object sender, EventArgs e)
    {
        if (!IsPostBack)
        {
            CommanFunction.FillCombo(DDProcessName, "Select Distinct PNM.PROCESS_NAME_ID,PNM.PROCESS_NAME From Process_Name_Master PNM,Process_Stock_Detail PSD Where PNM.PROCESS_NAME_ID=PSD.ToProcessId And PNM.PROCESS_NAME_ID<>1 Order By PNM.PROCESS_NAME_ID");
        }
    }
    protected void BtnSave_Click(object sender, EventArgs e)
    {
        LblErrorMessage.Text = "";
        string Str = "";
        int k=0;
        int VarCount = 0;
        string ChallanNo = "";
        SqlConnection con = new SqlConnection(ErpGlobal.DBCONNECTIONSTRING);
        con.Open();
        SqlTransaction Tran = con.BeginTransaction();
        try
        {
            Str = @"Update Process_Receive_Master_" + DDProcessName.SelectedValue + " Set Empid=PIM.Empid From Process_Stock_Detail PSD,Process_Issue_Master_" + DDProcessName.SelectedValue + " PIM,Process_Issue_Detail_" + DDProcessName.SelectedValue + " PID,Process_Receive_Detail_" + DDProcessName.SelectedValue + @" PRD 
                    Where FromProcessId<>0 And ToProcessId=" + DDProcessName.SelectedValue + @" And PIM.IssueOrderId=PID.IssueOrderId And PSD.IssueDetailId=PID.Issue_Detail_Id And 
                    Process_Receive_Master_" + DDProcessName.SelectedValue + @".Process_Rec_Id=PRD.Process_Rec_Id And PSD.ReceiveDetailId=PRD.Process_Rec_Detail_Id And PIM.Empid<>Process_Receive_Master_" + DDProcessName.SelectedValue + ".EmpId And Process_Receive_Master_" + DDProcessName.SelectedValue + @".EmpId=0";
            SqlHelper.ExecuteNonQuery(Tran, CommandType.Text, Str);

            while (k < 1)
            {
                //if (VarCount == 100)
                //{
                //    k = 10;
                //}
                Str = @"Select PSD.*,PIM.EmpId IssEmpId,PRM.EmpId RecEmpId,PRM.Process_Rec_Id From Process_Stock_Detail PSD,Process_Issue_Master_" + DDProcessName.SelectedValue + @" PIM,
                Process_Issue_Detail_" + DDProcessName.SelectedValue + " PID,Process_Receive_Master_" + DDProcessName.SelectedValue + @" PRM,
                Process_Receive_Detail_" + DDProcessName.SelectedValue + " PRD Where FromProcessId<>0 And ToProcessId=" + DDProcessName.SelectedValue + @" And 
                PIM.IssueOrderId=PID.IssueOrderId And PSD.IssueDetailId=PID.Issue_Detail_Id And PRM.Process_Rec_Id=PRD.Process_Rec_Id And PID.IssueOrderId=PRD.IssueOrderId And PID.Issue_Detail_Id=PRD.Issue_Detail_Id And PSD.ReceiveDetailId=PRD.Process_Rec_Detail_Id And PIM.Empid<>PRM.EmpId And PRM.ReceiveDate>'2012-11-30'";
                DataSet Ds = SqlHelper.ExecuteDataset(Tran, CommandType.Text, Str);
                if (Ds.Tables[0].Rows.Count > 0)
                {
                    VarCount = VarCount + 1;

                    int VarQty = Convert.ToInt32(SqlHelper.ExecuteScalar(Tran, CommandType.Text, "Select Sum(Qty) Qty From Process_Receive_Detail_" + DDProcessName.SelectedValue + " Where Process_Rec_Id=" + Ds.Tables[0].Rows[0]["Process_Rec_Id"]));

                    int VarQtyNew = Convert.ToInt32(SqlHelper.ExecuteScalar(Tran, CommandType.Text, @"Select Count(PSD.StockNo) Qty From Process_Stock_Detail PSD,Process_Issue_Master_" + DDProcessName.SelectedValue + @" PIM,
                        Process_Issue_Detail_" + DDProcessName.SelectedValue + " PID,Process_Receive_Master_" + DDProcessName.SelectedValue + @" PRM,
                        Process_Receive_Detail_" + DDProcessName.SelectedValue + " PRD Where FromProcessId<>0 And ToProcessId=" + DDProcessName.SelectedValue + @" And 
                        PIM.IssueOrderId=PID.IssueOrderId And PSD.IssueDetailId=PID.Issue_Detail_Id And PRM.Process_Rec_Id=PRD.Process_Rec_Id And PSD.ReceiveDetailId=PRD.Process_Rec_Detail_Id And 
                        PIM.Empid<>PRM.EmpId And PRM.Process_Rec_Id=" + Ds.Tables[0].Rows[0]["Process_Rec_Id"]));
                    if (VarQty == VarQtyNew)
                    {
                        SqlHelper.ExecuteNonQuery(Tran, CommandType.Text, @"Update Process_Receive_Master_" + DDProcessName.SelectedValue + " Set Empid=" + Ds.Tables[0].Rows[0]["IssEmpId"] + @" Where Process_Rec_Id=" + Ds.Tables[0].Rows[0]["Process_Rec_Id"]);
                    }
                    else
                    {
                        int VarProcessRecID = Convert.ToInt32(SqlHelper.ExecuteScalar(Tran, CommandType.Text, "Select Isnull(Max(process_rec_id ),0)+1 From MasterSetting"));
                        SqlHelper.ExecuteNonQuery(Tran, CommandType.Text, @"Insert into Process_Receive_Master_" + DDProcessName.SelectedValue + @"
                            Select " + VarProcessRecID + "," + Ds.Tables[0].Rows[0]["IssEmpId"] + @",ReceiveDate,UnitId,UserId," + VarProcessRecID + ",Companyid,Remarks,CalType From Process_Receive_Master_" + DDProcessName.SelectedValue + " Where Process_Rec_Id=" + Ds.Tables[0].Rows[0]["Process_Rec_Id"]);

                        SqlHelper.ExecuteNonQuery(Tran, CommandType.Text, @"Update Process_Receive_Detail_" + DDProcessName.SelectedValue + " Set Process_Rec_Id=" + VarProcessRecID + @"
                            From Process_Stock_Detail PSD,Process_Issue_Master_" + DDProcessName.SelectedValue + " PIM,Process_Issue_Detail_" + DDProcessName.SelectedValue + @" PID,
                            Process_Receive_Master_" + DDProcessName.SelectedValue + " PRM,Process_Receive_Detail_" + DDProcessName.SelectedValue + @" PRD 
                            Where FromProcessId<>0 And ToProcessId=" + DDProcessName.SelectedValue + @" And PIM.IssueOrderId=PID.IssueOrderId And PSD.IssueDetailId=PID.Issue_Detail_Id And 
                            PRM.Process_Rec_Id=PRD.Process_Rec_Id And PSD.ReceiveDetailId=PRD.Process_Rec_Detail_Id And PIM.Empid<>PRM.EmpId And 
                            PRM.Process_Rec_Id=" + Ds.Tables[0].Rows[0]["Process_Rec_Id"]);

                        SqlHelper.ExecuteNonQuery(Tran, CommandType.Text, "Update MasterSetting Set Process_Rec_ID =" + VarProcessRecID);
                        ChallanNo = ChallanNo + ',' + VarProcessRecID.ToString();
                    }
                }
                else
                {
                    k = 10;
                }
            }
            Tran.Commit();
            if (ChallanNo != "")
            {
                ScriptManager.RegisterStartupScript(Page, GetType(), "opn1", "alert('New Challan Numbers Are " + ChallanNo + "');", true);
            }
            LblErrorMessage.Text = "Data Updated Successfully ";
        }
        catch (Exception ex)
        {
            UtilityModule.MessageAlert(ex.Message, "Master/Process/frm_receive_process_next.aspx");
            Tran.Rollback();
            LblErrorMessage.Text = ex.Message;
            LblErrorMessage.Visible = true;
        }
        finally
        {
            con.Close();
            con.Dispose();
        }
    }
    protected void DDProcessName_SelectedIndexChanged(object sender, EventArgs e)
    {
        LblErrorMessage.Text = "";
    }
}