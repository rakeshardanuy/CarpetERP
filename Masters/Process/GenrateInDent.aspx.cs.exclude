using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Data;
using System.Data.SqlClient;
using System.Text;
using ClosedXML.Excel;
using System.IO;

public partial class GenrateInDent : System.Web.UI.Page
{
    static int MasterCompanyId;
    static int ReProcessType = 0;
    static int ChkReDeyingStatus = 0;
    protected void Page_Load(object sender, EventArgs e)
    {
        MasterCompanyId = Convert.ToInt16(Session["varCompanyId"]);
        if (Session["varCompanyId"] == null)
        {
            Response.Redirect("~/Login.aspx");
        }

        if (!IsPostBack)
        {
            hnorderid.Value = "0";
            hntagnoautogen.Value = variable.VarGENERATEINDENTTAGNOAUTOGENERATED;
            ViewState["IndentId"] = 0;
            ViewState["FinalDate"] = "";
            ViewState["othershadefinishedid"] = "0";

            TxtDate.Text = DateTime.Now.ToString("dd-MMM-yyyy");
            TxtReqDate.Text = DateTime.Now.ToString("dd-MMM-yyyy");
            UtilityModule.ConditionalComboFill(ref DDCompanyName, "select Distinct CI.CompanyId,CI.CompanyName from Companyinfo CI,Company_Authentication CA Where CI.CompanyId=CA.CompanyId And CA.UserId=" + Session["varuserId"] + "  And CI.MasterCompanyId=" + Session["varCompanyId"] + " Order By CompanyName", true, "--SelectCompany");

            if (DDCompanyName.Items.Count > 0)
            {
                DDCompanyName.SelectedValue = Session["CurrentWorkingCompanyID"].ToString();
                DDCompanyName.Enabled = false;
            }
            UtilityModule.ConditionalComboFill(ref DDBranchName, @"Select ID, BranchName 
                            From BRANCHMASTER BM(nolock) 
                            JOIN BranchUser BU(nolock) ON BU.BranchID = BM.ID And BU.UserID = " + Session["varuserId"] + @" 
                            Where BM.CompanyID = " + Session["CurrentWorkingCompanyID"] + " And BM.MasterCompanyID = " + Session["varCompanyId"], false, "");

            DDBranchName.Enabled = false;
            if (DDBranchName.Items.Count == 0)
            {
                ScriptManager.RegisterStartupScript(Page, GetType(), "opn1", "alert('Branch not define for this user!');", true);
                return;
            }
            UtilityModule.ConditionalComboFill(ref DDCustomerCode, "SELECT customerid,Customercode+ SPACE(5)+CompanyName from customerinfo Where MasterCompanyId=" + Session["varCompanyId"] + " order by Customercode", true, "--SELECT--");
            if (DDCustomerCode.Items.Count > 0)
            {
                DDCustomerCode.SelectedIndex = 1;
                CustomerCodeSelectedChange();
            }
            ParameteLabel();

            CommanFunction.FillCombo(DDcaltype, "select CalID,CalType from Process_CalType order by caltype");
            if (DDcaltype.Items.FindByValue("2") != null)
            {
                DDcaltype.SelectedValue = "2"; //Normal
            }

            int VarProdCodeNo = Convert.ToInt32(SqlHelper.ExecuteScalar(ErpGlobal.DBCONNECTIONSTRING, CommandType.Text, "Select VarProdCode From MasterSetting"));
            switch (VarProdCodeNo)
            {
                case 0:
                    procode.Visible = false;
                    // ItemDescription.Visible = true;
                    break;
                case 1:
                    procode.Visible = true;
                    //  ItemDescription.Visible = false;
                    break;
            }
            TDBtnAddEmp.ColSpan = 5;
            int VarCompanyNo = Convert.ToInt32(Session["varCompanyId"]);
            hncomp.Value = VarCompanyNo.ToString();

            string str = @"select Val,Type from SizeType Order  by Val
                       select flagforsampleorder From mastersetting";

            DataSet ds = SqlHelper.ExecuteDataset(ErpGlobal.DBCONNECTIONSTRING, CommandType.Text, str);

            UtilityModule.ConditionalComboFillWithDS(ref DDsizetype, ds, 0, false, "");

            if (Convert.ToInt16(ds.Tables[1].Rows[0]["flagforsampleorder"]) == 1)
            {
                TDChkForOrder.Visible = true;
                ChkEditOrder_CheckedChanged(sender, e);
            }
            else if (Session["varcompanyNo"].ToString() == "7")
            {
                ChkForOrder.Visible = true;
            }
            else
            {
                ChkForOrder.Visible = false;
            }
            switch (VarCompanyNo)
            {
                case 7:
                    TDBtnAddEmp.ColSpan = 1;
                    TDChkForOrder.Visible = true;
                    TDLblReqDate.Visible = true;
                    tdrate.Visible = false;
                    ChkForOrder.Checked = true;
                    ChkEditOrder_CheckedChanged(sender, e);
                    TxtDate.Enabled = false;
                    BtnPreview.Visible = false;
                    break;
                case 6:
                    BtnPreview.Visible = false;
                    TxtRate.Enabled = true;
                    break;
                case 4:
                    TDCaltype.Visible = false;
                    break;
                case 12:
                    TDLotNo.Visible = false;
                    TDStockQty.Visible = false;
                    TxtRate.Enabled = true;
                    break;
                case 14:
                    TDTagNo.Visible = true;
                    break;
                case 16:
                    TDBtnAddEmp.Visible = false;
                    TxtLoss.Enabled = false;
                    txtextraQty.Enabled = false;
                    ChkForWithoutRate.Visible = true;
                    BtnEmployeeWisePPDetail.Visible = true;
                    break;
                case 22:
                    TDGodownName.Visible = true;
                    break;
                case 28:
                    txtextraQty.Enabled = false;
                    break;
                case 42:
                    TDGodownName.Visible = true;
                    if (Session["usertype"].ToString() != "1")
                    {
                        TDBtnAddRate.Visible = false;
                    }
                    break;
                case 43:
                    //TDGodownName.Visible = true;
                    TDDDTagNo.Visible = true;
                    BtnMaterialIssueOnIndent.Visible = true;
                    break;
                case 45:
                    TDTagNo.Visible = true;
                    break;
            }
            if (MySession.TagNowise == "1")
            {
                if (VarCompanyNo == 43)
                {
                    TDTagNo.Visible = false;
                }
                else
                {
                    TDTagNo.Visible = true;
                }                
            }
            if (variable.VarGENERATEINDENTTAGNOAUTOGENERATED == "1")
            {
                txtTagno.Enabled = false;
                //chkoldtagno.Visible = true;
            }
            //Without Define BOM
            if (Session["WithoutBOM"].ToString() == "1")
            {
                TDBtnAddEmp.ColSpan = 1;
                TDChkForOrder.Visible = true;
                TDLblReqDate.Visible = true;
                ChkForOrder.Checked = true;
                ChkEditOrder_CheckedChanged(sender, e);
                TxtDate.Enabled = false;

                lblfinalDate.Text = "";
            }
            if (VarCompanyNo == 6 || VarCompanyNo == 7 || VarCompanyNo == 3 || VarCompanyNo == 10 || Session["withoutBOM"].ToString() == "1")
            {
                ChkForOrder.Text = "for Order Wise";
                UtilityModule.ConditionalComboFill(ref DDProcessName, "select distinct PROCESS_Name_ID,PROCESS_NAME from PROCESS_NAME_MASTER Where ProcessType=0 And MasterCompanyId=" + Session["varCompanyId"] + "", true, "--Select Process--");
            }
            else
            {
                UtilityModule.ConditionalComboFill(ref DDProcessName, "select distinct PROCESS_Name_ID,PROCESS_NAME from PROCESS_NAME_MASTER Where ProcessType=0 And MasterCompanyId=" + Session["varCompanyId"] + "", true, "--Select Process--");
            }
            //*******

            if (VarCompanyNo == 21)
            {
                if (DDcaltype.Items.Count > 0)
                {
                    DDcaltype.SelectedIndex = 1;
                }
            }
            //*******Genrate Indent Without Lot and stock qty
            if (variable.VarGENRATEINDENTWITHOUTLOT_STOCK == "1")
            {
                TDLotNo.Visible = false;
                TDTagNo.Visible = false;
                TDStockQty.Visible = false;
            }
            //*******

            if (variable.VarCompanyWiseChallanNoGenerated == "1")
            {
                TxtIndentNo.Enabled = false;
            }
        }
    }
    private void ParameteLabel()
    {
        String[] ParameterList = new String[8];
        ParameterList = UtilityModule.ParameteLabel(Convert.ToInt32(Session["varCompanyId"]));
        LblQuality.Text = ParameterList[0];
        LblDesign.Text = ParameterList[1];
        LblColor.Text = ParameterList[2];
        LblShape.Text = ParameterList[3];
        LblSize.Text = ParameterList[4];
        LblCategory.Text = ParameterList[5];
        LblItemName.Text = ParameterList[6];
        LblColorShade.Text = ParameterList[7];
    }
    protected void DDProcessProgramNo_SelectedIndexChanged(object sender, EventArgs e)
    {
        string strcategory = @"select Distinct vf.CATEGORY_ID,vf.CATEGORY_NAME from PP_Consumption PP inner join V_FinishedItemDetail  vf 
                             on PP.FinishedId=vf.ITEM_FINISHED_ID where PP.PPId=" + DDProcessProgramNo.SelectedValue + " And PP.MasterCompanyId=" + Session["varCompanyId"];

        if (MasterCompanyId == 16)
        {
            UtilityModule.ConditionalComboFill(ref DDPartyName, @"Select EI.EmpID, EI.EmpName  
                    From ProcessProgramWithEmp PPE(Nolock)
                    JOIN Empinfo EI(Nolock) ON EI.EmpId = PPE.EmpID 
                    Where PPE.PPID = " + DDProcessProgramNo.SelectedValue + @" 
                    Order By EI.EmpName ", true, "--Select--");
        }
        UtilityModule.ConditionalComboFill(ref DDCategory, strcategory, true, "--Select Category--");
    }
    protected void DDProcessName_SelectedIndexChanged(object sender, EventArgs e)
    {
        switch (DDProcessName.SelectedItem.Text.ToUpper())
        {
            case "DYEING":
                TDReDyeing.Visible = true;
                break;
            default:
                TDReDyeing.Visible = false;
                break;
        }
        ddpurchase_change();
    }
    private void ddpurchase_change()
    {
        string str = @"Select EI.EmpId, EmpName from EmpInfo EI inner join EmpProcess EP on EI.EmpId=EP.EmpId 
                    Where processId=" + DDProcessName.SelectedValue + " AND EI.MasterCompanyId=" + Session["varCompanyId"] + @" order by ei.empname

                    Select Distinct PPID, case When " + Session["varcompanyId"] + @"=9 Then (select strcarpets From [Get_ProcessLocalOrderNo](PPID)) + ' # '+cast(PC.PPID as varchar(50))
                            Else Case When " + Session["varcompanyId"] + @"=43 Then (dbo.[Get_OrderNoNew_CI](Pc.ppid)) + ' # '+ cast(ChallanNo as varchar(50))             
                            Else cast(ChallanNo as varchar(50)) + ' # '+ (dbo.[Get_OrderNoNew](Pc.ppid)) End End 
                    From ProcessProgram PC inner join ordermaster om on Pc.order_id=Om.orderid 
                    Where PC.Process_id=" + DDProcessName.SelectedValue + " And Pc.MasterCompanyId=" + Session["varCompanyId"] + " And OM.CompanyId=" + DDCompanyName.SelectedValue + "  order by PC.PPID Desc ";
                    
                    //Select Distinct PPID, case When " + Session["varcompanyId"] + @"=9 Then (select strcarpets From [Get_ProcessLocalOrderNo](PPID)) + ' # '+cast(PC.PPID as varchar(50))
                    //                   Else cast(ChallanNo as varchar(50)) + ' # '+ (dbo.[Get_OrderNoNew](Pc.ppid)) End  
                   //From ProcessProgram PC inner join ordermaster om on Pc.order_id=Om.orderid 
                   // Where PC.Process_id=" + DDProcessName.SelectedValue + " And Pc.MasterCompanyId=" + Session["varCompanyId"] + " And OM.CompanyId=" + DDCompanyName.SelectedValue + "  order by PC.PPID Desc ";

        DataSet ds = SqlHelper.ExecuteDataset(ErpGlobal.DBCONNECTIONSTRING, CommandType.Text, str);

        UtilityModule.ConditionalComboFillWithDS(ref DDPartyName, ds, 0, true, "--Select--");
        UtilityModule.ConditionalComboFillWithDS(ref DDProcessProgramNo, ds, 1, true, "--Select--");

        if (Convert.ToInt32(Session["VarcompanyNo"]) == 7)
        {
            Btnorder.Visible = true;
        }

        if (DDOrderNo.SelectedIndex > 0)
        {
            switch (Session["varcompanyNo"].ToString())
            {
                case "7":
                    string FinalDate;
                    FinalDate = Convert.ToString(SqlHelper.ExecuteScalar(ErpGlobal.DBCONNECTIONSTRING, CommandType.Text, "select Replace(Convert(nvarchar(11),FinalDate,106),' ','-') As Finaldate From OrderProcessPlanning where OrderId=" + DDOrderNo.SelectedValue + " And ProcessId=" + DDProcessName.SelectedValue + ""));
                    ViewState["FinalDate"] = FinalDate;
                    lblfinalDate.Text = "";
                    lblfinalDate.Text = "Stock At PH Date :" + FinalDate;
                    TxtReqDate.Text = Convert.ToString(Convert.ToDateTime(FinalDate).AddDays(-7).ToString("dd-MMM-yyyy"));
                    break;
            }

        }
        if (Convert.ToInt32(Session["varcompanyno"]) == 7)
        {
            if (DDProcessName.SelectedValue == "2" && DDOrderNo.SelectedIndex > 0)
            {
                fillorderdetail();
                tdordergrid.Visible = true;
                DDCategory.Enabled = false;
                DDItem.Enabled = false;
                DDQuality.Enabled = false;
                DDDesign.Enabled = false;
                DDColor.Enabled = false;
                DDShape.Enabled = false;
                DDColorShade.Enabled = false;
                DDSize.Enabled = false;
            }
            else if (ChkForOrder.Checked == true)
            {
                fillorderdetail();
                tdordergrid.Visible = true;
                DDCategory.Enabled = true;
                DDItem.Enabled = false;
                DDQuality.Enabled = false;
                DDDesign.Enabled = false;
                DDColor.Enabled = false;
                DDShape.Enabled = false;
                DDColorShade.Enabled = false;
                DDSize.Enabled = false;
            }
            else
            {
                tdordergrid.Visible = false;
                DDCategory.Enabled = true;
                DDItem.Enabled = true;
                DDQuality.Enabled = true;
                DDDesign.Enabled = true;
                DDColor.Enabled = true;
                DDShape.Enabled = true;
                DDColorShade.Enabled = true;
                DDSize.Enabled = true;
            }
        }
        switch (Session["varcompanyNo"].ToString())
        {
            case "3":
                fillorderdetail();
                tdordergrid.Visible = true;
                DDCategory.Enabled = false;
                DDItem.Enabled = false;
                DDQuality.Enabled = false;
                DDDesign.Enabled = false;
                DDColor.Enabled = false;
                DDShape.Enabled = false;
                DDColorShade.Enabled = false;
                DDSize.Enabled = false;
                break;
            case "10":
                fillorderdetail();
                tdordergrid.Visible = true;
                DDCategory.Enabled = false;
                DDItem.Enabled = false;
                DDQuality.Enabled = false;
                DDDesign.Enabled = false;
                DDColor.Enabled = false;
                DDShape.Enabled = false;
                DDColorShade.Enabled = false;
                DDSize.Enabled = false;
                break;
            default:
                if (ChkForOrder.Checked == true)
                {
                    fillorderdetail();
                    tdordergrid.Visible = true;
                    DDCategory.Enabled = false;
                    DDItem.Enabled = false;
                    DDQuality.Enabled = false;
                    DDDesign.Enabled = false;
                    DDColor.Enabled = false;
                    DDShape.Enabled = false;
                    DDColorShade.Enabled = false;
                    DDSize.Enabled = false;
                }
                break;
        }

    }
    protected void DDCategory_SelectedIndexChanged(object sender, EventArgs e)
    {
        ddlcategorycange();
    }
    private void ddlcategorycange()
    {
        if (DDOrderNo.SelectedIndex > 0)
        {
            //CheckReqDate();
        }
        DDQuality.Items.Clear();
        DDDesign.Items.Clear();
        DDColor.Items.Clear();
        DDShape.Items.Clear();
        DDSize.Items.Clear();
        DDColorShade.Items.Clear();
        TdQuality.Visible = false;
        TdDesign.Visible = false;
        TdColor.Visible = false;
        TdColorShade.Visible = false;
        TdShape.Visible = false;
        TdSize.Visible = false;
        string strsql = @"SELECT [CATEGORY_PARAMETERS_ID],[CATEGORY_ID],IPM.[PARAMETER_ID],PARAMETER_NAME 
                      FROM [ITEM_CATEGORY_PARAMETERS] IPM inner join PARAMETER_MASTER PM on 
                      IPM.[PARAMETER_ID]=PM.[PARAMETER_ID] where [CATEGORY_ID]=" + DDCategory.SelectedValue + " And PM.MasterCompanyId=" + Session["varCompanyId"];
        DataSet ds = SqlHelper.ExecuteDataset(ErpGlobal.DBCONNECTIONSTRING, CommandType.Text, strsql);
        if (ds.Tables[0].Rows.Count > 0)
        {
            foreach (DataRow dr in ds.Tables[0].Rows)
            {

                switch (dr["PARAMETER_ID"].ToString())
                {
                    case "1":
                        TdQuality.Visible = true;
                        break;
                    case "2":
                        TdDesign.Visible = true;

                        break;
                    case "3":
                        TdColor.Visible = true;

                        break;
                    case "6":
                        TdColorShade.Visible = true;

                        break;
                    case "4":
                        TdShape.Visible = true;

                        break;
                    case "5":
                        TdSize.Visible = true;
                        break;
                    case "10":
                        TdColor.Visible = true;
                        break;
                }
            }
        }
        if (ChkForOrder.Checked == true)
        {
            string stritem = "select distinct IM.Item_Id,IM.Item_Name from  Item_Parameter_Master IPM  inner Join Item_Master IM on IM.Item_Id=IPM.Item_Id inner join Item_Category_Master ICM on ICM.Category_Id=IM.Category_Id where  IM.Category_Id=" + DDCategory.SelectedValue + " And IM.MasterCompanyId=" + Session["varCompanyId"];
            UtilityModule.ConditionalComboFill(ref DDItem, stritem, true, "---Select Item----");
        }
        else
        {
            string stritem = "";

            stritem = @"select distinct IM.Item_Id,IM.Item_Name 
                    From PP_Consumption OCD 
                    inner join ProcessProgram PP on OCD.OrderId=PP.Order_Id 
                    inner join Item_Parameter_Master IPM on IPM.Item_Finished_Id=OCD.FinishedId 
                    inner Join Item_Master IM on IM.Item_Id=IPM.Item_Id 
                    inner join Item_Category_Master ICM on ICM.Category_Id=IM.Category_Id 
                    where PP.PPId=" + DDProcessProgramNo.SelectedValue + " and  IM.Category_Id=" + DDCategory.SelectedValue + " And IM.MasterCompanyId=" + Session["varCompanyId"];
            if (MasterCompanyId == 16 || MasterCompanyId == 28)
            {
                stritem = @"Select Distinct VF.ITEM_ID, VF.ITEM_NAME 
                    From ProcessProgram PP(Nolock) 
                    JOIN ProcessProgramEmpWithItemDetail PPEID(Nolock) ON PPEID.PPID = PP.PPID And PPEID.EmpID = " + DDPartyName.SelectedValue + @" 
                    JOIN V_FinishedItemDetail VF ON VF.ITEM_FINISHED_ID = PPEID.FinishedId And VF.CATEGORY_ID = " + DDCategory.SelectedValue + @" 
                    Where PP.PPId = " + DDProcessProgramNo.SelectedValue + " And PP.MasterCompanyId = " + Session["varCompanyId"] + @" 
                    Order By VF.ITEM_NAME";
            }
            UtilityModule.ConditionalComboFill(ref DDItem, stritem, true, "---Select Item----");
        }
    }
    protected void DDItem_SelectedIndexChanged(object sender, EventArgs e)
    {
        DDITEM_CHANGED();
        ComboFill();
        //Fill_Quantity();
    }
    private void DDITEM_CHANGED()
    {
        if (ChkForOrder.Checked == true)
        {
            string strquality = "select distinct Q.QualityId,QualityName from  Item_Parameter_Master IPM  inner Join Item_Master IM on IM.Item_Id=IPM.Item_Id inner join Quality Q on Q.QualityId=IPM.Quality_Id where  IM.Item_Id=" + DDItem.SelectedValue + " And IM.MasterCompanyId=" + Session["varCompanyId"];
            UtilityModule.ConditionalComboFill(ref DDQuality, strquality, true, "--Select Quality--");
        }
        else
        {
            string strquality = "";
            strquality = @"Select distinct Q.QualityId,QualityName 
                From PP_Consumption OCD 
                inner join ProcessProgram PP on OCD.OrderId=PP.Order_Id and ocd.PPId=pp.PPID
                inner join Item_Parameter_Master IPM on IPM.Item_Finished_Id=OCD.FinishedId 
                inner Join Item_Master IM on IM.Item_Id=IPM.Item_Id 
                inner join Quality Q on Q.QualityId=IPM.Quality_Id 
                where PP.PPId=" + DDProcessProgramNo.SelectedValue + " and IM.Item_Id=" + DDItem.SelectedValue + " And IM.MasterCompanyId=" + Session["varCompanyId"];

            if (MasterCompanyId == 16 || MasterCompanyId == 28)
            {
                strquality = @"Select Distinct VF.QualityId, VF.QualityName 
                    From ProcessProgram PP(Nolock) 
                    JOIN ProcessProgramEmpWithItemDetail PPEID(Nolock) ON PPEID.PPID = PP.PPID And PPEID.EmpID = " + DDPartyName.SelectedValue + @" 
                    JOIN V_FinishedItemDetail VF ON VF.ITEM_FINISHED_ID = PPEID.FinishedId And VF.CATEGORY_ID = " + DDCategory.SelectedValue + " And VF.Item_Id = " + DDItem.SelectedValue + @" 
                    Where PP.PPId = " + DDProcessProgramNo.SelectedValue + " And PP.MasterCompanyId = " + Session["varCompanyId"] + @" 
                    Order By VF.QualityName";
            }
            UtilityModule.ConditionalComboFill(ref DDQuality, strquality, true, "--Select Quality--");
        }
        UtilityModule.ConditionalComboFill(ref ddUnit, "select Distinct UnitId,unitName From  Unit U,Item_Master IM where U.UnitTypeId=IM.UnitTypeId And ITEM_ID=" + DDItem.SelectedValue + " And IM.MasterCompanyId=" + Session["varCompanyId"], true, " Select ");
        if (ddUnit.Items.Count > 0)
        {
            ddUnit.SelectedIndex = 1;
        }
    }
    protected void ComboFill()
    {
        DDDesign.Items.Clear();
        DDColor.Items.Clear();
        DDShape.Items.Clear();
        DDSize.Items.Clear();
        DDColorShade.Items.Clear();
        if (ChkForOrder.Checked == true)
        {
            string strColor = "select distinct C.ColorId,ColorName from  Item_Parameter_Master IPM  inner Join Item_Master IM on IM.Item_Id=IPM.Item_Id inner join Color C on C.ColorId=IPM.Color_Id where IM.Item_Id=" + DDItem.SelectedValue + " And IM.MasterCompanyId=" + Session["varCompanyId"];
            string strShape = "select distinct SH.ShapeId,ShapeName from  Item_Parameter_Master IPM inner Join Item_Master IM on IM.Item_Id=IPM.Item_Id inner join Shape SH on SH.ShapeId=IPM.Shape_Id where  IM.Item_Id=" + DDItem.SelectedValue + " And IM.MasterCompanyId=" + Session["varCompanyId"];
            string strShadeColor;
            string strDesign;
            if (TdQuality.Visible == true)
            {
                strShadeColor = "select distinct SC.ShadeColorId,ShadeColorName from  Item_Parameter_Master IPM  inner Join Item_Master IM on IM.Item_Id=IPM.Item_Id inner join ShadeColor SC on SC.ShadeColorId=IPM.ShadeColor_Id where  IM.Item_Id=" + DDItem.SelectedValue + " and IPM.Quality_Id=" + DDQuality.SelectedValue + " And IM.MasterCompanyId=" + Session["varCompanyId"];
                strDesign = "select distinct D.DesignId,DesignName from  Item_Parameter_Master IPM  inner Join Item_Master IM on IM.Item_Id=IPM.Item_Id inner join Design D on D.DesignId=IPM.Design_Id where  IM.Item_Id=" + DDItem.SelectedValue + " and IPM.Quality_Id=" + DDQuality.SelectedValue + " And IM.MasterCompanyId=" + Session["varCompanyId"];
            }
            else
            {
                strShadeColor = "select distinct SC.ShadeColorId,ShadeColorName from  Item_Parameter_Master IPM  inner Join Item_Master IM on IM.Item_Id=IPM.Item_Id inner join ShadeColor SC on SC.ShadeColorId=IPM.ShadeColor_Id where  IM.Item_Id=" + DDItem.SelectedValue + "  And IM.MasterCompanyId=" + Session["varCompanyId"];
                strDesign = "select distinct D.DesignId,DesignName from  Item_Parameter_Master IPM  inner Join Item_Master IM on IM.Item_Id=IPM.Item_Id inner join Design D on D.DesignId=IPM.Design_Id where  IM.Item_Id=" + DDItem.SelectedValue + "  And IM.MasterCompanyId=" + Session["varCompanyId"];
            }

            UtilityModule.ConditionalComboFill(ref DDDesign, strDesign, true, "--Select Design--");
            UtilityModule.ConditionalComboFill(ref DDColor, strColor, true, "--Select Color--");
            UtilityModule.ConditionalComboFill(ref DDShape, strShape, true, "--Select Shape--");
            UtilityModule.ConditionalComboFill(ref DDColorShade, strShadeColor, true, "--Select ShadeColor--");
        }
        else
        {
            string strColor = "select distinct C.ColorId,ColorName from PP_Consumption OCD inner join ProcessProgram PP on OCD.OrderId=PP.Order_Id inner join Item_Parameter_Master IPM on IPM.Item_Finished_Id=OCD.FinishedId inner Join Item_Master IM on IM.Item_Id=IPM.Item_Id inner join Color C on C.ColorId=IPM.Color_Id where PP.PPId=" + DDProcessProgramNo.SelectedValue + " and IM.Item_Id=" + DDItem.SelectedValue + " And IM.MasterCompanyId=" + Session["varCompanyId"];
            string strShape = "select distinct SH.ShapeId,ShapeName from PP_Consumption OCD inner join ProcessProgram PP on OCD.OrderId=PP.Order_Id inner join Item_Parameter_Master IPM on IPM.Item_Finished_Id=OCD.FinishedId inner Join Item_Master IM on IM.Item_Id=IPM.Item_Id inner join Shape SH on SH.ShapeId=IPM.Shape_Id where PP.PPId=" + DDProcessProgramNo.SelectedValue + " and IM.Item_Id=" + DDItem.SelectedValue + " And IM.MasterCompanyId=" + Session["varCompanyId"];
            string strShadeColor = "";
            if (MasterCompanyId == 9)
            {
                strShadeColor = @"select distinct SC.ShadeColorId,SC.ShadeColorName 
                                         from PP_Consumption OCD  
                                         inner join ProcessProgram PP on OCD.OrderId=PP.Order_Id  
                                         inner join Item_Parameter_Master IPM on IPM.Item_Finished_Id=OCD.FinishedId  
                                         inner Join Item_Master IM on IM.Item_Id=IPM.Item_Id  
                                         inner join ShadeColor SC on SC.ShadeColorId=IPM.ShadeColor_Id
                                   where PP.PPId=" + DDProcessProgramNo.SelectedValue + " and IM.Item_Id=" + DDItem.SelectedValue + " and IPM.Quality_Id=" + DDQuality.SelectedValue + @" 
                                   And IM.MasterCompanyId=" + Session["varCompanyId"];
            }
            else if (MasterCompanyId == 44)	
            {	
                strShadeColor = @"select distinct  case when pp.Process_ID  IN (12,11,18,8,29,34) then SCI.ShadeColorId else SC.ShadeColorId  end ShadeColorId,case when pp.Process_ID IN (12,11,18,8,29,34) then SCI.ShadeColorName+'/'+SC.ShadeColorName else  SC.ShadeColorName+'/'+SCI.ShadeColorName  end ShadeColorName 	
                                        from PP_Consumption OCD  	
                                        inner join ProcessProgram PP on OCD.OrderId=PP.Order_Id   and ocd.PPId=pp.PPID	
                                        inner join Item_Parameter_Master IPM on IPM.Item_Finished_Id=OCD.FinishedId  	
                                        inner Join Item_Master IM on IM.Item_Id=IPM.Item_Id  	
                                        inner join ShadeColor SC on SC.ShadeColorId=IPM.ShadeColor_Id	
                                        inner join  Item_Parameter_Master IPM1 on IPM1.Item_Finished_id=OCD.IFinishedid 	
                                        inner join ShadeColor SCI on SCI.ShadeColorId=IPM1.ShadeColor_Id 	
                                        where PP.PPId=" + DDProcessProgramNo.SelectedValue + " and IM.Item_Id=" + DDItem.SelectedValue + " and                                                              IPM.Quality_Id=" + DDQuality.SelectedValue + @" 	
                                            And IM.MasterCompanyId=" + Session["varCompanyId"];	
            }	
            else
            {
                strShadeColor = @"select distinct SC.ShadeColorId,SC.ShadeColorName+'/'+SCI.ShadeColorName 
                                        from PP_Consumption OCD  
                                        inner join ProcessProgram PP on OCD.OrderId=PP.Order_Id   and ocd.PPId=pp.PPID
                                        inner join Item_Parameter_Master IPM on IPM.Item_Finished_Id=OCD.FinishedId  
                                        inner Join Item_Master IM on IM.Item_Id=IPM.Item_Id  
                                        inner join ShadeColor SC on SC.ShadeColorId=IPM.ShadeColor_Id
                                        inner join  Item_Parameter_Master IPM1 on IPM1.Item_Finished_id=OCD.IFinishedid 
                                        inner join ShadeColor SCI on SCI.ShadeColorId=IPM1.ShadeColor_Id 
                                        where PP.PPId=" + DDProcessProgramNo.SelectedValue + " and IM.Item_Id=" + DDItem.SelectedValue + " and IPM.Quality_Id=" + DDQuality.SelectedValue + @" 
                                        And IM.MasterCompanyId=" + Session["varCompanyId"];
            }



            string strDesign = "select distinct D.DesignId,DesignName from PP_Consumption OCD inner join ProcessProgram PP on OCD.OrderId=PP.Order_Id inner join Item_Parameter_Master IPM on IPM.Item_Finished_Id=OCD.FinishedId inner Join Item_Master IM on IM.Item_Id=IPM.Item_Id inner join Design D on D.DesignId=IPM.Design_Id where PP.PPId=" + DDProcessProgramNo.SelectedValue + " and IM.Item_Id=" + DDItem.SelectedValue + " and IPM.Quality_Id=" + DDQuality.SelectedValue + " And IM.MasterCompanyId=" + Session["varCompanyId"];

            if (MasterCompanyId == 16 || MasterCompanyId == 28)
            {
                strColor = @"Select Distinct VF.ColorId, VF.ColorName 
                    From ProcessProgram PP(Nolock) 
                    JOIN ProcessProgramEmpWithItemDetail PPEID(Nolock) ON PPEID.PPID = PP.PPID And PPEID.EmpID = " + DDPartyName.SelectedValue + @" 
                    JOIN V_FinishedItemDetail VF ON VF.ITEM_FINISHED_ID = PPEID.FinishedId And VF.CATEGORY_ID = " + DDCategory.SelectedValue + @" 
                            And VF.Item_Id = " + DDItem.SelectedValue + @" 
                    Where PP.PPId = " + DDProcessProgramNo.SelectedValue + " And PP.MasterCompanyId = " + Session["varCompanyId"] + @" 
                    Order By VF.ColorName";

                strShape = @"Select Distinct VF.ShapeId, VF.ShapeName 
                    From ProcessProgram PP(Nolock) 
                    JOIN ProcessProgramEmpWithItemDetail PPEID(Nolock) ON PPEID.PPID = PP.PPID And PPEID.EmpID = " + DDPartyName.SelectedValue + @" 
                    JOIN V_FinishedItemDetail VF ON VF.ITEM_FINISHED_ID = PPEID.FinishedId And VF.CATEGORY_ID = " + DDCategory.SelectedValue + @" 
                            And VF.Item_Id = " + DDItem.SelectedValue + @" 
                    Where PP.PPId = " + DDProcessProgramNo.SelectedValue + " And PP.MasterCompanyId = " + Session["varCompanyId"] + @" 
                    Order By VF.ShapeName";

                strShadeColor = @"Select Distinct VF.ShadeColorId, VF.ShadeColorName + '/' + VF1.ShadeColorName ShadeColor
                    From ProcessProgram PP(Nolock) 
                    JOIN ProcessProgramEmpWithItemDetail PPEID(Nolock) ON PPEID.PPID = PP.PPID And PPEID.EmpID = " + DDPartyName.SelectedValue + @" 
                    JOIN V_FinishedItemDetail VF ON VF.ITEM_FINISHED_ID = PPEID.FinishedId And VF.CATEGORY_ID = " + DDCategory.SelectedValue + @" 
                            And VF.Item_Id = " + DDItem.SelectedValue + " And VF.QualityID = " + DDQuality.SelectedValue + @" 
                    JOIN PP_Consumption OCD(Nolock) ON OCD.PPID = PP.PPID And OCD.FinishedID = PPEID.FinishedID 
                    JOIN V_FinishedItemDetail VF1 ON VF1.ITEM_FINISHED_ID = OCD.IFinishedId 
                    Where PP.PPId = " + DDProcessProgramNo.SelectedValue + " And PP.MasterCompanyId = " + Session["varCompanyId"] + @" 
                    Order By ShadeColor";

                strDesign = @"Select Distinct VF.DesignID, VF.DesignName 
                    From ProcessProgram PP(Nolock) 
                    JOIN ProcessProgramEmpWithItemDetail PPEID(Nolock) ON PPEID.PPID = PP.PPID And PPEID.EmpID = " + DDPartyName.SelectedValue + @" 
                    JOIN V_FinishedItemDetail VF ON VF.ITEM_FINISHED_ID = PPEID.FinishedId And VF.CATEGORY_ID = " + DDCategory.SelectedValue + @" 
                            And VF.Item_Id = " + DDItem.SelectedValue + " And VF.QualityID = " + DDQuality.SelectedValue + @"
                    Where PP.PPId = " + DDProcessProgramNo.SelectedValue + " And PP.MasterCompanyId = " + Session["varCompanyId"] + @" 
                    Order By VF.DesignName";
            }
            UtilityModule.ConditionalComboFill(ref DDDesign, strDesign, true, "--Select Design--");
            UtilityModule.ConditionalComboFill(ref DDColor, strColor, true, "--Select Color--");
            UtilityModule.ConditionalComboFill(ref DDShape, strShape, true, "--Select Shape--");
            UtilityModule.ConditionalComboFill(ref DDColorShade, strShadeColor, true, "--Select ShadeColor--");
        }
    }
    protected void DDQuality_SelectedIndexChanged(object sender, EventArgs e)
    {
        DDQUALITY_CHANGED();
    }
    private void DDQUALITY_CHANGED()
    {
        if (ChkForOrder.Checked == true)
        {
            UtilityModule.ConditionalComboFill(ref ddUnit, "select Distinct UnitId,unitName From  Unit U,Item_Master IM where U.UnitTypeId=IM.UnitTypeId And ITEM_ID=" + DDItem.SelectedValue + " And IM.MasterCompanyId=" + Session["varCompanyId"], true, " Select ");
            if (ddUnit.SelectedIndex > 0)
            {
                ddUnit.SelectedIndex = 1;
            }
            ComboFill();
        }
        else
        {
            Fill_Quantity();
            ComboFill();
        }
    }
    private void Fill_Quantity()
    {
        int color = 0;
        int quality = 0;
        int design = 0;
        int shape = 0;
        int size = 0;
        int shadeColor = 0;
        if ((TdQuality.Visible == true && DDQuality.SelectedIndex > 0) || TdQuality.Visible != true)
        {
            quality = 1;
        }
        if (TdDesign.Visible == true && DDDesign.SelectedIndex > 0 || TdDesign.Visible != true)
        {
            design = 1;
        }
        if (TdColor.Visible == true && DDColor.SelectedIndex > 0 || TdColor.Visible != true)
        {
            color = 1;
        }
        if (TdShape.Visible == true && DDShape.SelectedIndex > 0 || TdShape.Visible != true)
        {
            shape = 1;
        }
        if (TdSize.Visible == true && DDSize.SelectedIndex > 0 || TdSize.Visible != true)
        {
            size = 1;
        }
        if (TdColorShade.Visible == true && DDColorShade.SelectedIndex > 0 || TdColorShade.Visible != true)
        {
            shadeColor = 1;
        }
        if (quality == 1 && design == 1 && color == 1 && shape == 1 && size == 1 && shadeColor == 1)
        {
            try
            {
                int finishedid = Convert.ToInt32(UtilityModule.getItemFinishedId(DDItem, DDQuality, DDDesign, DDColor, DDShape, DDSize, TxtProdCode, DDColorShade, 0, "", Convert.ToInt32(Session["varCompanyId"])));

                if (finishedid > 0)
                {
                    SqlParameter[] _arrpara = new SqlParameter[6];
                    _arrpara[0] = new SqlParameter("@FinishedId", SqlDbType.Int);
                    _arrpara[1] = new SqlParameter("@PPID", SqlDbType.Int);
                    _arrpara[2] = new SqlParameter("@ProcessID", SqlDbType.Int);
                    _arrpara[3] = new SqlParameter("@TotalQty", SqlDbType.Float);
                    _arrpara[4] = new SqlParameter("@PreQty", SqlDbType.Float);
                    _arrpara[5] = new SqlParameter("@Loss", SqlDbType.Float);
                    //_arrpara[6] = new SqlParameter("@TotalAssignedQTY", SqlDbType.Float);
                    _arrpara[0].Value = finishedid;
                    _arrpara[1].Value = DDProcessProgramNo.SelectedValue;
                    _arrpara[2].Value = DDProcessName.SelectedValue;
                    _arrpara[3].Direction = ParameterDirection.Output;
                    _arrpara[4].Direction = ParameterDirection.Output;
                    _arrpara[5].Direction = ParameterDirection.Output;
                    //  _arrpara[6].Direction = ParameterDirection.Output;
                    SqlHelper.ExecuteNonQuery(ErpGlobal.DBCONNECTIONSTRING, CommandType.StoredProcedure, "Pro_Get_TotalConsmp_Indent_LossQty", _arrpara);

                    txtTotalQty.Text = _arrpara[3].Value.ToString();
                    TxtPreQty.Text = _arrpara[4].Value.ToString();
                    TxtLoss.Text = _arrpara[5].Value.ToString();
                    txtpqty.Text = Convert.ToString(Convert.ToDecimal(txtTotalQty.Text == "" ? "0" : txtTotalQty.Text) - Convert.ToDecimal(TxtPreQty.Text == "" ? "0" : TxtPreQty.Text));

                    Session["FinishedId"] = finishedid;
                    TxtFinishedid.Text = "a1=" + DDCompanyName.SelectedValue + "&a2=" + DDPartyName.SelectedValue + "&a3=" + finishedid + "&a4=" + DDcaltype.SelectedValue;
                    if (MasterCompanyId != 44)
                    {
                        string str = @"SELECT DISTINCT U.UNITID,U.UNITNAME 
                        FROM ORDER_CONSUMPTION_DETAIL OCD(Nolock)
                        JOIN V_FINISHEDITEMDETAIL VF(Nolock) ON VF.ITEM_FINISHED_ID = OCD.OFINISHEDID 
                        JOIN UNIT U(Nolock) ON U.UNITID = OCD.OUNITID 
                        WHERE OCD.PROCESSID=" + DDProcessName.SelectedValue + " AND VF.ITEM_ID=" + DDItem.SelectedValue + " And VF.MasterCompanyId=" + Session["varCompanyId"] + @" 
                        And OCD.ORDERID in (Select Order_id from ProcessProgram(Nolock) Where PPID=" + DDProcessProgramNo.SelectedValue + ") ";

                        if (DDItem.SelectedItem.Text == "CLOTH" && Convert.ToInt32(Session["varCompanyId"]) == 16)
                        {
                            str = str + " Union Select UnitID, UnitName From Unit(Nolock) Where UnitID = 1 And MasterCompanyID = " + Session["varCompanyId"];
                        }

                        UtilityModule.ConditionalComboFill(ref ddUnit, str, true, " Select ");

                        if (ddUnit.Items.Count > 0)
                        {
                            ddUnit.SelectedIndex = 1;
                        }
                    }

                    if (MasterCompanyId == 22)
                    {
                        FillGodownName();
                    }
                    else if (MasterCompanyId == 42)
                    {
                        FillGodownName();
                    }
                    else
                    {
                        FillLotNo();
                    }

                }
            }
            catch (Exception ex)
            {
                UtilityModule.MessageAlert(ex.Message, "Master/Process/GenrateInDent.aspx");
                lblMessage.Visible = true;
                lblMessage.Text = ex.Message;
            }
        }
        else
        {
            TxtPreQty.Text = "";
            txtTotalQty.Text = "";
            txtpqty.Text = "";
        }
    }
    protected void DDDesign_SelectedIndexChanged(object sender, EventArgs e)
    {
        dddesign_changed();
    }
    private void dddesign_changed()
    {
        if (ChkForOrder.Checked == false)
        {
            Fill_Quantity();

            if (Session["VarCompanyId"].ToString() == "16")
            {
                if (TxtLoss.Text == "0" || TxtLoss.Text == "")
                {
                    ScriptManager.RegisterStartupScript(Page, this.GetType(), "Javascript", "javascript:confirmSubmit(); ", true);
                }
            }
        }
    }
    protected void DDColor_SelectedIndexChanged(object sender, EventArgs e)
    {
        dddesign_changed();
    }
    protected void FillIssueShade()
    {
        string str = "";
        if (variable.ORDER_STOCK_ASSIGN == "1")
        {
            str = @"Select  Distinct VF.Shadecolorid, VF.ShadeColorName 
                    From ProcessProgram PP(Nolock) 
                    JOIN OrderStockAssign OSA(Nolock) ON OSA.OrderID = PP.Order_ID 
                    JOIN V_FinishedItemDetail VF(Nolock) ON VF.ITEM_FINISHED_ID = OSA.FinishedID And VF.ITEM_ID = " + DDItem.SelectedValue + " And VF.QualityId = " + DDQuality.SelectedValue + @" 
                    Where PP.PPID = " + DDProcessProgramNo.SelectedValue + " Order By VF.ShadeColorName";
        }
        else if (Session["varcompanyNo"].ToString() == "9" || Session["varcompanyNo"].ToString() == "46")
        {
            str = @"Select Distinct VF1.ShadeColorID, VF1.ShadeColorName 
                    From PP_Consumption a
                    JOIN V_FINISHEDITEMDETAIL VF ON VF.ITEM_FINISHED_ID = a.FinishedID And ITEM_ID=" + DDItem.SelectedValue + " and QualityId=" + DDQuality.SelectedValue + @" 
                                And VF.ShadeColorID = " + DDColorShade.SelectedValue + @" 
                    JOIN V_FINISHEDITEMDETAIL VF1 ON VF1.ITEM_FINISHED_ID = a.IFinishedID 
                    Where PPID = " + DDProcessProgramNo.SelectedValue + " Order By VF1.ShadeColorName";
        }
        else
        {
            str = @"Select Distinct Shadecolorid,ShadeColorName 
                From V_FinishedItemdetail Where ITEM_ID=" + DDItem.SelectedValue + " and QualityId=" + DDQuality.SelectedValue + "";
            if (chkredyeing.Checked == true)
            {
                if (Session["varcompanyNo"].ToString() != "27")
                {
                    str = str + " and  ShadecolorId<>" + DDColorShade.SelectedValue;
                }
            }
            else
            {
                if (Session["varcompanyNo"].ToString() == "44")
                {
                    if (DDProcessName.SelectedValue == "5")
                    {
                        str = str + " and ShadeColorName like 'Undyed%'";
                        
                    }
                    else
                    {
                        str = str + " and ShadecolorId=" + DDColorShade.SelectedValue;
                    
                    }

                    
                  
                }
                else
                {
                   
                        str = str + " and ShadeColorName like 'Undyed%'";
                   
               }
                
            }
        }
        UtilityModule.ConditionalComboFill(ref DDISSUESHADE, str, true, "--Plz select--");
    }
    protected void DDColorShade_SelectedIndexChanged(object sender, EventArgs e)
    {
        //*****************Fill Issue Shade
        if (variable.Carpetcompany == "1")// && DDProcessName.SelectedItem.Text.ToUpper() == "DYEING")
        {
            if (variable.VarDyeingIssueOthershade == "1" || chkredyeing.Checked == true)
            {

                TDISSUESHADE.Visible = true;
                //Auto select issue shade Id
                string Shadecolorid = "0";
                string str = @"select Top(1) vf.ShadecolorId From PP_Consumption PC inner Join v_finisheditemdetail vf on PC.IFinishedid=vf.ITEM_FINISHED_ID inner join V_finisheditemdetail vf1 on PC.Finishedid=vf1.ITEM_FINISHED_ID
                            Where PPId=" + DDProcessProgramNo.SelectedValue + " and Vf1.Item_id=" + DDItem.SelectedValue + " and Vf1.qualityid=" + DDQuality.SelectedValue + " and vf1.ShadecolorId=" + DDColorShade.SelectedValue;

                DataSet ds = SqlHelper.ExecuteDataset(ErpGlobal.DBCONNECTIONSTRING, CommandType.Text, str);
                if (ds.Tables[0].Rows.Count > 0)
                {
                    Shadecolorid = Convert.ToString(ds.Tables[0].Rows[0]["Shadecolorid"]);
                }

                //**********
                FillIssueShade();
                if (DDISSUESHADE.Items.FindByValue(Shadecolorid) != null)
                {
                    DDISSUESHADE.SelectedValue = Shadecolorid;
                    DDISSUESHADE_SelectedIndexChanged(sender, new EventArgs());
                }
            }
            else
            {
                TDISSUESHADE.Visible = false;
            }
        }

        //****************
        dddesign_changed();
        DyeingTypeTrueorfalse();
        switch (Session["varcompanyid"].ToString())
        {
            case "4":
                GetdyingTypeswithRates();
                break;
            default:
                break;
        }
    }
    protected void DDSize_SelectedIndexChanged(object sender, EventArgs e)
    {
        dddesign_changed();
    }
    protected void DDsizetype_SelectedIndexChanged(object sender, EventArgs e)
    {
        fillsize();
    }
    protected void DDShape_SelectedIndexChanged(object sender, EventArgs e)
    {
        fillsize();
    }
    private void fillsize()
    {
        string strSize;

        if (DDsizetype.SelectedIndex == 0)
        {
            strSize = " Sizeft";
        }
        else if (DDsizetype.SelectedIndex == 1)
        {
            strSize = "Sizemtr";
        }
        else
        {
            strSize = "Sizeinch";
        }
        if (ChkForOrder.Checked == true)
        {
            strSize = "select distinct SZ.SizeID," + strSize + " from  Item_Parameter_Master IPM  inner Join Item_Master IM on IM.Item_Id=IPM.Item_Id inner join Size SZ on SZ.SizeId=IPM.Size_Id where  IM.Item_Id=" + DDItem.SelectedValue + " and SZ.ShapeId=" + DDShape.SelectedValue + " And IM.MasterCompanyId=" + Session["varCompanyId"];
        }
        else
        {
            strSize = "select distinct SZ.SizeID," + strSize + " from Order_Consumption_Detail OCD inner join ProcessProgram PP on OCD.OrderId=PP.Order_Id inner join Item_Parameter_Master IPM on IPM.Item_Finished_Id=OCD.OFinishedId inner Join Item_Master IM on IM.Item_Id=IPM.Item_Id inner join Size SZ on SZ.SizeId=IPM.Size_Id where PP.PPId=" + DDProcessProgramNo.SelectedValue + " and IM.Item_Id=" + DDItem.SelectedValue + " and SZ.ShapeId=" + DDShape.SelectedValue + " And IM.MasterCompanyId=" + Session["varCompanyId"];
        }

        //}
        //else
        //{
        //    if (ChkForOrder.Checked == true)
        //    {
        //        strSize = "select distinct SZ.SizeID,SizeMtr from  Item_Parameter_Master IPM  inner Join Item_Master IM on IM.Item_Id=IPM.Item_Id inner join Size SZ on SZ.SizeId=IPM.Size_Id where  IM.Item_Id=" + DDItem.SelectedValue + " and SZ.ShapeId=" + DDShape.SelectedValue + " And IM.MasterCompanyId=" + Session["varCompanyId"];
        //    }
        //    else
        //    {
        //        strSize = "select distinct SZ.SizeID,SizeMtr from Order_Consumption_Detail OCD inner join ProcessProgram PP on OCD.OrderId=PP.Order_Id inner join Item_Parameter_Master IPM on IPM.Item_Finished_Id=OCD.OFinishedId inner Join Item_Master IM on IM.Item_Id=IPM.Item_Id inner join Size SZ on SZ.SizeId=IPM.Size_Id where PP.PPId=" + DDProcessProgramNo.SelectedValue + " and IM.Item_Id=" + DDItem.SelectedValue + " and SZ.ShapeId=" + DDShape.SelectedValue + " And IM.MasterCompanyId=" + Session["varCompanyId"];
        //    }
        //}

        UtilityModule.ConditionalComboFill(ref DDSize, strSize, true, "--Select Size--");
    }
    protected void BtnSave_Click(object sender, EventArgs e)
    {
        if (Session["VarCompanyNo"].ToString() == "16")
        {
            if (hnRetunTypeValue.Value == "0")
            {
                lblMessage.Visible = true;
                lblMessage.Text = "Please fill loss percentage";
                return;
            }
        }
        double Qty = Convert.ToDouble(txtQty.Text == "" ? "0" : txtQty.Text);
        CHECKVALIDCONTROL();
        if (Convert.ToInt32(Session["VarcompanyNo"]) == 5)
        {
            string ChkMsg = CheckStockQty();
            if (ChkMsg == "G")
            {
                lblMessage.Visible = true;
                lblMessage.Text = "Qty should not be greater than assigned stock";
                return;
            }
        }
        if (ChkForOrder.Checked == false)
        {
            check_qty();
        }
        if (Qty == 0.0)
        {
            lblMessage.Visible = true;
            lblMessage.Text = "Qty Cann't be Zero";
        }
        CheckReDyeingProcessType();
        if (lblMessage.Visible == false && lblMessage.Text == "" && lblMessage1.Text == "")
        {
            Save_indent();

            switch (Session["varcompanyNo"].ToString())
            {
                case "7":
                    fillorderdetail();
                    break;
            }
            if (Session["WithoutBOM"].ToString() == "1")
            {
                fillorderdetail();
            }
        }
    }
    private void Save_indent()
    {
        SqlConnection con = new SqlConnection(ErpGlobal.DBCONNECTIONSTRING);
        con.Open();
        SqlTransaction Tran = con.BeginTransaction();
        try
        {
            SqlParameter[] _arrpara = new SqlParameter[40];
            if (BtnSave.Text != "Update")
            {
                ViewState["IndentDetailId"] = 0;
            }
            _arrpara[0] = new SqlParameter("@IndentId", SqlDbType.Int);
            _arrpara[1] = new SqlParameter("@IndentDetailId", SqlDbType.Int);
            _arrpara[2] = new SqlParameter("@PPNo", SqlDbType.Int);
            _arrpara[3] = new SqlParameter("@IFinishedId", SqlDbType.Int);
            _arrpara[4] = new SqlParameter("@OFinishedId", SqlDbType.Int);
            _arrpara[5] = new SqlParameter("@Quantity", SqlDbType.Float, 50);
            _arrpara[6] = new SqlParameter("@Rate", SqlDbType.Float);
            _arrpara[7] = new SqlParameter("@DyingType", SqlDbType.Int);
            _arrpara[8] = new SqlParameter("@CompanyId", SqlDbType.Int);
            _arrpara[9] = new SqlParameter("@PartyId", SqlDbType.Int);
            _arrpara[10] = new SqlParameter("@ProcessID", SqlDbType.Int);
            _arrpara[11] = new SqlParameter("@Date", SqlDbType.DateTime);
            _arrpara[12] = new SqlParameter("@IndentNo", SqlDbType.NVarChar, 50);
            _arrpara[13] = new SqlParameter("@MasterCompanyId", SqlDbType.Int);
            _arrpara[14] = new SqlParameter("@UserId", SqlDbType.Int);
            _arrpara[15] = new SqlParameter("@Id", SqlDbType.Int);
            _arrpara[16] = new SqlParameter("@lotno", SqlDbType.NVarChar, 50);
            _arrpara[17] = new SqlParameter("@Orderid", SqlDbType.Int);
            _arrpara[18] = new SqlParameter("@O_FINISHED_TYPE_ID", SqlDbType.Int);
            _arrpara[19] = new SqlParameter("@UNITID", SqlDbType.Int);
            _arrpara[20] = new SqlParameter("@ReqDate", SqlDbType.DateTime);
            _arrpara[21] = new SqlParameter("@Loss", SqlDbType.Float);
            _arrpara[22] = new SqlParameter("@OrderWiseFlag", SqlDbType.Int);
            _arrpara[23] = new SqlParameter("@orderdetailid", SqlDbType.Int);
            _arrpara[24] = new SqlParameter("@Remark", SqlDbType.NVarChar, 250);
            _arrpara[25] = new SqlParameter("@ItemRemark", SqlDbType.NVarChar, 250);
            _arrpara[26] = new SqlParameter("@Sizeflag", SqlDbType.Int);
            _arrpara[27] = new SqlParameter("@ExtraQty", SqlDbType.Float);
            _arrpara[28] = new SqlParameter("@CancelQty", SqlDbType.Float);
            _arrpara[29] = new SqlParameter("@Editflag", SqlDbType.TinyInt);
            _arrpara[30] = new SqlParameter("@DyingMatch", SqlDbType.VarChar, 20);
            _arrpara[31] = new SqlParameter("@DyeingType", SqlDbType.VarChar, 20);
            _arrpara[32] = new SqlParameter("@Dyeing", SqlDbType.VarChar, 20);
            _arrpara[33] = new SqlParameter("@TagNo", SqlDbType.VarChar, 50);
            _arrpara[34] = new SqlParameter("@Othershadefinishedid", SqlDbType.Int);
            _arrpara[35] = new SqlParameter("@Re_Process", SqlDbType.Int);
            _arrpara[36] = new SqlParameter("@OldTagNowise", SqlDbType.Int);
            _arrpara[37] = new SqlParameter("@Msg", SqlDbType.VarChar, 100);
            _arrpara[38] = new SqlParameter("@BranchID", SqlDbType.Int);
            _arrpara[39] = new SqlParameter("@GodownID", SqlDbType.Int);

            _arrpara[0].Value = ViewState["IndentId"];
            _arrpara[1].Value = ViewState["IndentDetailId"];
            _arrpara[4].Value = UtilityModule.getItemFinishedId(DDItem, DDQuality, DDDesign, DDColor, DDShape, DDSize, TxtProdCode, Tran, DDColorShade, "", Convert.ToInt32(Session["varCompanyId"]));
            if (ChkForOrder.Checked == true)
            {
                _arrpara[2].Value = 0;
                _arrpara[3].Value = 0;
                _arrpara[16].Value = "Without Lot No";
                _arrpara[17].Value = DDOrderNo.SelectedValue;
                _arrpara[21].Value = 0;
                _arrpara[22].Value = 1;// For OrderWise GenerateIndent
                _arrpara[7].Value = 1;
            }
            else
            {
                _arrpara[2].Value = DDProcessProgramNo.SelectedValue;
                _arrpara[3].Value = 0;
                _arrpara[16].Value = (TDLotNo.Visible == true ? ddllotno.SelectedItem.Text : "Without Lot No");
                int orderId = Convert.ToInt32(SqlHelper.ExecuteScalar(Tran, CommandType.Text, "Select Order_Id From ProcessProgram where PPID=" + DDProcessProgramNo.SelectedValue + " And MasterCompanyId=" + Session["varCompanyId"] + ""));
                _arrpara[17].Value = orderId;
                _arrpara[21].Value = Convert.ToDouble(TxtLoss.Text == "" ? "0" : TxtLoss.Text);
                _arrpara[22].Value = 0;
                _arrpara[7].Value = DDcaltype.SelectedValue;
            }
            _arrpara[5].Value = txtQty.Text;
            _arrpara[6].Value = TxtRate.Text == "" ? "0" : TxtRate.Text;
            _arrpara[8].Value = DDCompanyName.SelectedValue;
            _arrpara[9].Value = DDPartyName.SelectedValue;
            _arrpara[10].Value = DDProcessName.SelectedValue;
            _arrpara[11].Value = TxtDate.Text;
            _arrpara[12].Direction = ParameterDirection.InputOutput;
            _arrpara[12].Value = TxtIndentNo.Text.ToUpper();
            _arrpara[13].Value = Session["varCompanyId"];
            _arrpara[14].Value = Session["varuserid"];
            _arrpara[15].Direction = ParameterDirection.Output;
            _arrpara[18].Value = 0;
            _arrpara[19].Value = ddUnit.SelectedValue;
            _arrpara[20].Value = TxtReqDate.Text;
            if (DDProcessName.SelectedValue == "2" && Convert.ToInt32(Session["varCompanyId"]) == 7 && tdordergrid.Visible == true)
            {
                _arrpara[23].Value = hnorderid.Value;
            }
            else if (ChkForOrder.Checked == true)
            {
                _arrpara[23].Value = hnorderid.Value;
            }
            else
            {
                _arrpara[23].Value = 0;
            }
            _arrpara[24].Value = txtremarks.Text;
            _arrpara[25].Value = txtitemremark.Text;
            _arrpara[26].Value = DDsizetype.Visible == true ? DDsizetype.SelectedValue : "0";
            _arrpara[27].Value = txtextraQty.Text == "" ? "0" : txtextraQty.Text;
            _arrpara[28].Value = 0;
            _arrpara[29].Value = 0; //0 for New Entry
            _arrpara[30].Value = TDDyeingMatch.Visible == true ? DDDyeingMatch.SelectedItem.Text : "";
            _arrpara[31].Value = TDDyingType.Visible == true ? DDDyingType.SelectedItem.Text : "";
            _arrpara[32].Value = TDDyeing.Visible == true ? DDDyeing.SelectedItem.Text : "";
            if (TDDDTagNo.Visible == true)
            {
                _arrpara[33].Value = DDTagNo.SelectedItem.Text;
            }
            else
            {
                _arrpara[33].Value = txtTagno.Text == "" ? "Without Tag No" : txtTagno.Text;
            }
            _arrpara[34].Value = TDISSUESHADE.Visible == true ? ViewState["othershadefinishedid"] : "0";
            _arrpara[35].Value = chkredyeing.Checked == true ? "1" : "0";
            _arrpara[36].Value = chkoldtagno.Visible == true ? (chkoldtagno.Checked == true ? "1" : "0") : "0";
            _arrpara[37].Direction = ParameterDirection.Output;
            _arrpara[38].Value = DDBranchName.SelectedValue;
            _arrpara[39].Value = TDGodownName.Visible == true ? DDGodownName.SelectedValue : "0";

            SqlHelper.ExecuteNonQuery(Tran, CommandType.StoredProcedure, "Pro_SaveIndent", _arrpara);
            if (_arrpara[37].Value.ToString() != "")
            {
                lblMessage.Visible = true;
                lblMessage.Text = _arrpara[37].Value.ToString();
            }
            Tran.Commit();

            ViewState["IndentId"] = _arrpara[15].Value;
            TxtIndentNo.Text = _arrpara[12].Value.ToString();
            BtnSave.Text = "Save";
            Fill_Grid();
            SaveRefresh();
        }
        catch (Exception ex)
        {
            UtilityModule.MessageAlert(ex.Message, "Master/Process/GenrateInDent.aspx");
            lblMessage.Visible = true;
            lblMessage.Text = ex.Message;

        }
        finally
        {
            con.Close();
            con.Dispose();
        }
    }
    private void Fill_Grid()
    {
        BtnPreview.Enabled = true;
        DGIndentDetail.DataSource = GetDetail();
        DGIndentDetail.DataBind();
        switch (Session["varcompanyNo"].ToString())
        {
            case "4":
                Session["ReportPath"] = "Reports/GenrateIndentDeepak.rpt";
                break;
            case "14":
                Session["ReportPath"] = "Reports/GenrateIndentEMIKEA.rpt";
                break;
            case "27":
                Session["ReportPath"] = "Reports/GenrateIndentAntique.rpt";
                break;
            case "21":
                if (Session["UserType"].ToString() == "1")
                {
                    Session["ReportPath"] = "Reports/GenrateIndentKaysons.rpt";
                }
                else
                {
                    Session["ReportPath"] = "Reports/GenrateIndentWithoutRateKaysons.rpt";
                }
                break;
            case "44":
                Session["ReportPath"] = "Reports/GenrateIndentAgni.rpt";
                break;
            case "38":
                Session["ReportPath"] = "Reports/GenrateIndentVikramKhamaria.rpt";
                break;
            default:
                Session["ReportPath"] = "Reports/GenrateIndent.rpt";
                break;
        }
        Session["CommanFormula"] = "{GenrateIndentReport.IndentID}=" + ViewState["IndentId"];
    }
    private DataSet GetDetail()
    {
        DataSet DS = null;
        string sqlstr = "";
        SqlConnection con = new SqlConnection(ErpGlobal.DBCONNECTIONSTRING);
        if (ChkForOrder.Checked == false)
        {
            sqlstr = @"Select IND.IndentDetailId,PPNo,IndentNo,IndentQty Quantity,Rate,VF1.CATEGORY_NAME+space(3)+VF1.ITEM_NAME+space(3)+VF1.QualityName+ Space(3)+VF1.designName+ 
                      Space(3)+VF1.ColorName+ Space(3)+VF1.ShadeColorName+ Space(3)+VF1.ShapeName+ Space(3)+VF1.SizeMtr InDescription,VF.CATEGORY_NAME+space(3)+VF.ITEM_NAME+space(3)+
                      VF.QualityName+ Space(3)+VF.designName+ Space(3)+VF.ColorName+ Space(3)+VF.ShadeColorName+ Space(3)+VF.ShapeName+ Space(3)+case when IND.flagsize=1 Then VF.SizeMtr Else case When IND.flagSize=0 Then vf.SizeFt else vf.Sizeinch End ENd OutDescription,ExtraQty,CancelQty,IND.Lotno,IND.TagNo
                      From IndentMaster INM
                      inner join IndentDetail IND on INM.indentid=IND.IndentId
                      inner join V_FinishedItemDetail VF on vf.ITEM_FINISHED_ID=ind.OFinishedId
                      left join V_FinishedItemDetail VF1 on vf1.ITEM_FINISHED_ID=ind.IFinishedId
                      Where IND.IndentId=" + ViewState["IndentId"] + " And INM.MasterCompanyId=" + Session["varCompanyId"] + " And INM.CompanyId=" + DDCompanyName.SelectedValue + " order by IndentDetailId";

        }
        else
        {
            if (Convert.ToInt32(Session["varCompanyId"]) == 44)
            {

                sqlstr = @"Select  IND.IndentDetailId,PPNo,IndentNo,Quantity,Rate,'' InDescription,
                    ICM.Category_Name+space(5)+IM.Item_Name+space(5)+IPM.QDCS + Space(5)+IPM.SizeMtr OutDescription,ExtraQty,IND.Lotno,IND.TagNo,u.UnitName From IndentMaster INM inner join IndentDetail IND on 
                    IND.IndentId=INM.IndentId inner join ViewFindFinishedidItemidQDCSS IPM on IND.OFinishedId=IPM.Finishedid  inner join Item_Master IM on IPM.Item_Id=IM.Item_Id inner join ITEM_CATEGORY_MASTER ICM on IM.Category_Id=ICM.Category_Id join Unit u on ind.UnitId=u.UnitId  Where  IND.IndentId=" + ViewState["IndentId"] + " And INM.MasterCompanyId=" + Session["varCompanyId"] + " And INM.CompanyId=" + DDCompanyName.SelectedValue;
            }
            else
            {
                sqlstr = @"Select  IND.IndentDetailId,PPNo,IndentNo,Quantity,Rate,'' InDescription,
                    ICM.Category_Name+space(5)+IM.Item_Name+space(5)+IPM.QDCS + Space(5)+IPM.SizeMtr OutDescription,ExtraQty,IND.Lotno,IND.TagNo From IndentMaster INM inner join IndentDetail IND on 
                    IND.IndentId=INM.IndentId inner join ViewFindFinishedidItemidQDCSS IPM on IND.OFinishedId=IPM.Finishedid  inner join Item_Master IM on IPM.Item_Id=IM.Item_Id inner join ITEM_CATEGORY_MASTER ICM on IM.Category_Id=ICM.Category_Id  Where  IND.IndentId=" + ViewState["IndentId"] + " And INM.MasterCompanyId=" + Session["varCompanyId"] + " And INM.CompanyId=" + DDCompanyName.SelectedValue;
            
            
            }
        }
        try
        {
            DS = SqlHelper.ExecuteDataset(con, CommandType.Text, sqlstr);
        }
        catch (Exception ex)
        {
            UtilityModule.MessageAlert(ex.Message, "Master/Process/GenrateInDent.aspx");
        }
        finally
        {
            con.Close();
            con.Dispose();
        }
        return DS;
    }
    private void SaveRefresh()
    {
        DDCompanyName.Enabled = false;
        DDPartyName.Enabled = false;
        DDProcessName.Enabled = false;
        DDProcessProgramNo.Enabled = false;
        TxtIndentNo.Enabled = false;
        TxtDate.Enabled = false;
        TxtIndentNo.Enabled = false;
        DDCustomerCode.Enabled = false;
        DDOrderNo.Enabled = false;
        if (hncomp.Value != "7")
        {
            //DDQuality.SelectedIndex = -1;
            DDDesign.SelectedIndex = -1;
            DDColor.SelectedIndex = -1;
            DDShape.SelectedIndex = -1;
            DDSize.SelectedIndex = -1;
            if (Session["VarCompanyNo"].ToString() != "43")
            {
                DDColorShade.SelectedIndex = -1;
            }

        }
        txtremarks.Text = "";
        txtTotalQty.Text = "";
        TxtPreQty.Text = "";
        txtpqty.Text = "";
        txtQty.Text = "";
        TxtRate.Text = "";
        hnorderid.Value = "0";
        txtitemremark.Text = "";
        txtextraQty.Text = "";
        if (TDDyeingMatch.Visible == true)
        {
            DDDyeingMatch.SelectedIndex = -1;
        }
        if (TDDyingType.Visible == true)
        {
            DDDyingType.SelectedIndex = -1;
        }
        if (TDDyeing.Visible == true)
        {
            DDDyeing.SelectedIndex = -1;
        }

        txtTagno.Text = "";
    }
    private void CheckReDyeingProcessType()
    {
        lblMessage.Visible = false;
        lblMessage.Text = "";
        ChkReDeyingStatus = Convert.ToInt32(chkredyeing.Checked == true ? "1" : "0");
        DataSet Ds = SqlHelper.ExecuteDataset(ErpGlobal.DBCONNECTIONSTRING, CommandType.Text, "select Indentid,Re_Process from indentdetail where IndentId=" + ViewState["IndentId"] + " order by Indentdetailid ");
        if (Ds.Tables[0].Rows.Count > 0)
        {
            ReProcessType = Convert.ToInt32(Ds.Tables[0].Rows[0]["Re_Process"].ToString());

            if (ChkReDeyingStatus != ReProcessType)
            {
                lblMessage.Visible = true;
                lblMessage.Text = "Please generate another indent for dyeing status change";
                return;
            }
        }
    }
    protected void DGIndentDetail_SelectedIndexChanged(object sender, EventArgs e)
    {
        ViewState["IndentDetailId"] = DGIndentDetail.SelectedValue;
        SqlConnection con = new SqlConnection(ErpGlobal.DBCONNECTIONSTRING);
        try
        {
            ViewState["IndentId"] = SqlHelper.ExecuteScalar(con, CommandType.Text, "Select IndentId from IndentDetail where IndentDetailId=" + ViewState["IndentDetailId"]).ToString();
        }
        catch (Exception ex)
        {
            UtilityModule.MessageAlert(ex.Message, "Master/Process/GenrateInDent.aspx");
        }
        finally
        {
            con.Close();
            con.Dispose();
        }
        BtnSave.Text = "Update";
    }
    private string CheckStockQty()
    {
        string Message = "";
        try
        {
            SqlParameter[] _param = new SqlParameter[8];
            _param[0] = new SqlParameter("@OFinishedID", Session["FinishedId"]);
            _param[1] = new SqlParameter("@ProcessProgramNo", DDProcessProgramNo.SelectedValue);
            _param[2] = new SqlParameter("@TXTQTY", txtQty.Text);
            _param[3] = new SqlParameter("@Message", SqlDbType.NVarChar, 10);
            _param[3].Direction = ParameterDirection.Output;
            _param[4] = new SqlParameter("@NewEditFlag", BtnSave.Text == "Update" ? DGIndentDetail.SelectedDataKey.Value : 0);
            _param[5] = new SqlParameter("@LotNo", ddllotno.SelectedItem.Text);
            _param[6] = new SqlParameter("@CompanyId", DDCompanyName.SelectedValue);
            SqlHelper.ExecuteNonQuery(ErpGlobal.DBCONNECTIONSTRING, CommandType.StoredProcedure, "CheckStockQty_indent", _param);
            Message = _param[3].Value.ToString();
        }
        catch (Exception ex)
        {
            lblMessage.Text = ex.Message;
            lblMessage.Visible = true;
            UtilityModule.MessageAlert(ex.Message, "Masters/Process/GenrateInDent");
        }
        return Message;
    }
    protected void TxtQty_TextChanged(object sender, EventArgs e)
    {
        QtyTextChanged();
    }
    private void QtyTextChanged()
    {
        if (Convert.ToInt32(Session["varCompanyId"]) == 5)
        {
            string ChkMsg = CheckStockQty();
            if (ChkMsg == "G")
            {
                lblMessage.Visible = true;
                lblMessage.Text = "Qty should not be greater than assigned stock";
                txtQty.Text = "";
                txtQty.Focus();
                return;
            }
        }
        double Qty = 0;
        if (ChkForOrder.Checked == false)
        {
            double stockqty = Convert.ToDouble(txtstock.Text == "" ? "0" : txtstock.Text);
            double totalQty = Convert.ToDouble(txtTotalQty.Text == "" ? "0" : txtTotalQty.Text);
            double VarPercentQty = Convert.ToDouble(SqlHelper.ExecuteScalar(ErpGlobal.DBCONNECTIONSTRING, CommandType.Text, "Select PercentageExecssQtyForIndent from MasterSetting"));
            if (VarPercentQty <= 0.0)
            {
                VarPercentQty = Convert.ToDouble(SqlHelper.ExecuteScalar(ErpGlobal.DBCONNECTIONSTRING, CommandType.Text,
                        "Select PercentageExecssQtyForIndent From ProcessProgramExcessPercentage(Nolock) Where MasterCompanyID = " + Session["varCompanyId"] + " And PPID = " + DDProcessProgramNo.SelectedValue));
            }
            totalQty = totalQty * (100.0 + VarPercentQty) / 100;
            double PreQty = Convert.ToDouble(TxtPreQty.Text == "" ? "0" : TxtPreQty.Text);
            Qty = Convert.ToDouble(txtQty.Text == "" ? "0" : txtQty.Text);
            #region
            if (MySession.IndentAsProduction == "1")
            {
                if (Qty + PreQty > totalQty)
                {
                    lblMessage.Visible = true;
                    lblMessage.Text = "Qty is greater than Stock or Total Qty";
                    txtQty.Text = "";
                    txtQty.Focus();

                }
                else
                {
                    try
                    {
                        lblMessage.Text = "";
                        string st = "select round(isnull(Rate,0),2) from DyeingRateMaster where PartyId=" + DDPartyName.SelectedValue + " and FromoQty <=" + txtQty.Text + " and ToQty>=" + txtQty.Text + " and  FINISHEDID=" + Session["FinishedId"] + " And DyeingTypeId=" + DDcaltype.SelectedValue + " And Companyid=" + DDCompanyName.SelectedValue;
                        double rate = Convert.ToDouble(SqlHelper.ExecuteScalar(ErpGlobal.DBCONNECTIONSTRING, CommandType.Text, st));

                        if (rate == 0)
                        {
                            if (MasterCompanyId == 16 && MasterCompanyId == 28)
                            {
                                lblMessage.Visible = true;
                                lblMessage.Text = "Error:- Rate not define please define rate..........";
                                txtQty.Text = "0";
                            }
                        }
                        else
                        {
                            lblMessage.Text = "";
                            TxtRate.Text = rate.ToString();
                        }
                    }
                    catch (Exception ex)
                    {
                        UtilityModule.MessageAlert(ex.Message, "Master/Process/GenrateInDent.aspx");
                    }
                }
            }
            else
            {
                if (Qty + PreQty > totalQty || Qty > stockqty && variable.VarGENRATEINDENTWITHOUTLOT_STOCK == "0")
                {

                    lblMessage.Visible = true;
                    lblMessage.Text = "Qty is greater than Stock or Total Qty";
                    txtQty.Text = "";
                    txtQty.Focus();
                }
                else
                {
                    if ((Session["varcompanyid"].ToString() != "4") && (Session["varcompanyid"].ToString() != "43"))
                    {
                        try
                        {
                            lblMessage.Text = "";
                            double QtyNew = 0;
                            if (Session["varcompanyNo"].ToString() == "30")
                            {
                                QtyNew = (txtQty.Text == "" ? 0 : Convert.ToDouble(txtQty.Text)) + (txtextraQty.Text == "" ? 0 : Convert.ToDouble(txtextraQty.Text));
                            }
                            else
                            {
                                QtyNew = txtQty.Text == "" ? 0 : Convert.ToDouble(txtQty.Text);
                            }
                            string st = @"select round(isnull(Rate,0),2) from DyeingRateMaster where PartyId=" + DDPartyName.SelectedValue + @" and 
                                        FromoQty <=" + QtyNew + " and ToQty>=" + QtyNew + " and  FINISHEDID=" + Session["FinishedId"] + @" And 
                                        DyeingTypeId=" + DDcaltype.SelectedValue + " And CompanyId=" + DDCompanyName.SelectedValue;
                            double rate = Convert.ToDouble(SqlHelper.ExecuteScalar(ErpGlobal.DBCONNECTIONSTRING, CommandType.Text, st));
                            //if (rate == 0 && Convert.ToInt32(Session["varcompanyNo"]) != 16)
                            if (rate == 0)
                            {
                                lblMessage.Visible = true;
                                lblMessage.Text = "Error:- Rate not define please define rate..........";
                                txtQty.Text = "0";
                            }
                            else
                            {
                                lblMessage.Text = "";
                                TxtRate.Text = rate.ToString();
                            }
                        }
                        catch (Exception ex)
                        {
                            UtilityModule.MessageAlert(ex.Message, "Master/Process/GenrateInDent.aspx");
                        }
                    }
                }
            #endregion
            }
        }

        double QTY;
        if (hncomp.Value == "7")
        {
            if (txtQty.Text == "")
                txtQty.Text = "0";
            if (Hnqty.Value != "")
            {
                QTY = Convert.ToDouble(Hnqty.Value) * 5 / 100;
                QTY = QTY + Convert.ToDouble(HNPENQTY.Value);
            }
            else
            {
                QTY = Convert.ToDouble(txtQty.Text);
            }
            if (Convert.ToDouble(txtQty.Text) > QTY)
            {
                lblMessage1.Text = "Qty is greater than Stock or Total Qty";
                lblMessage1.Visible = true;
            }
            else
            {
                lblMessage1.Text = "";
                lblMessage1.Visible = false;
            }
        }
        Fillamount();
    }
    protected void Fillamount()
    {
        double Tqyt = Convert.ToDouble(txtQty.Text == "" ? "0" : txtQty.Text) + Convert.ToDouble(txtextraQty.Text == "" ? "0" : txtextraQty.Text);
        txtamt.Text = Convert.ToString(Tqyt * Convert.ToDouble(TxtRate.Text == "" ? "0" : TxtRate.Text));
    }
    protected void DDcaltype_SelectedIndexChanged(object sender, EventArgs e)
    {
        TxtFinishedid.Text = "a1=" + DDCompanyName.SelectedValue + "&a2=" + DDPartyName.SelectedValue + "&a3=" + Session["FinishedId"] + "&a4=" + DDcaltype.SelectedValue;
    }
    protected void BtnLogout_Click(object sender, EventArgs e)
    {
        UtilityModule.LogOut(Convert.ToInt32(Session["varuserid"]));
        Session["varuserid"] = null;
        Session["varCompanyId"] = null;
        string message = "you are successfully loggedout..";
        Response.Redirect("~/Login.aspx?Message=" + message + "");
    }
    protected void ddllotno_SelectedIndexChanged(object sender, EventArgs e)
    {
        txtstock.Text = "";
        if (TDDDTagNo.Visible == false)
        {
            LotNoSelectedIndexChanged();
        }
        else
        {
            if (variable.Carpetcompany == "1" && variable.VarDyeingIssueOthershade == "1" && DDProcessName.SelectedItem.Text.ToUpper() == "DYEING")
            {
                FillTagNoOtherIssueShadeWise();
            }
            else
            {
                FillTagNo();
            }


           // FillTagNo();
        }
    }
    private void FillTagNo()
    {
        string str = @"select distinct s.TagNo, s.TagNo 
                        From stock s(Nolock) 
                        join ORDER_CONSUMPTION_DETAIL OCD(Nolock) on S.ITEM_FINISHED_ID=OCD.IFINISHEDID 
                        join ProcessProgram(Nolock) PR on OCD.ORDERID=pr.Order_ID 
                        where pr.PPID=" + DDProcessProgramNo.SelectedValue + " and ocd.OFINISHEDID=" + Session["FinishedId"] + @" and 
                        Companyid=" + DDCompanyName.SelectedValue;

        if (ddllotno .SelectedIndex > 0)
        {
            str = str + " And s.LotNo = '" + ddllotno.SelectedItem.Text + "' ";
        }
        if (MySession.Stockapply == "True")
        {
            str = str + " and Round(S.Qtyinhand,3)>0";
        }
        if (chkredyeing.Checked == false)
        {
            str = str + " and Godownid in(" + variable.VarGENERATEINDENTGODOWNID + ")";
        }
        UtilityModule.ConditionalComboFill(ref DDTagNo, str, true, "--Select--");
    }
    private void FillTagNoOtherIssueShadeWise()
    {
        string str = @"select Distinct S.TagNo,S.TagNo From stock S inner Join V_FinishedItemDetail vf on s.ITEM_FINISHED_ID=vf.ITEM_FINISHED_ID
                                Where S.Companyid=" + DDCompanyName.SelectedValue + " and  vf.ITEM_ID=" + DDItem.SelectedValue + @" And 
                                Vf.QualityId=" + DDQuality.SelectedValue + " and vf.ShadecolorId=" + DDISSUESHADE.SelectedValue;
        if (ddllotno.SelectedIndex > 0)
        {
            str = str + " And s.LotNo = '" + ddllotno.SelectedItem.Text + "' ";
        }
        if (MySession.Stockapply == "True")
        {
            str = str + " and Round(S.Qtyinhand,3)>0";
        }
        if (chkredyeing.Checked == false)
        {
            str = str + " and Godownid in(" + variable.VarGENERATEINDENTGODOWNID + ")";
        }
        UtilityModule.ConditionalComboFill(ref DDTagNo, str, true, "--Select--");
    }
    private void LotNoSelectedIndexChanged()
    {
        if (ddllotno.SelectedIndex > 0)
        {
            SqlConnection con = new SqlConnection(ErpGlobal.DBCONNECTIONSTRING);
            con.Open();
            SqlTransaction Tran = con.BeginTransaction();
            try
            {
                SqlParameter[] _arrpara = new SqlParameter[11];
                _arrpara[0] = new SqlParameter("@lotno", SqlDbType.NVarChar, 50);
                _arrpara[1] = new SqlParameter("@finishedid", SqlDbType.Int);
                _arrpara[2] = new SqlParameter("@companyid", SqlDbType.Int);
                _arrpara[3] = new SqlParameter("@stockqty", SqlDbType.Float, 50);
                _arrpara[4] = new SqlParameter("@OFinishedid", SqlDbType.Int);
                _arrpara[5] = new SqlParameter("@PPID", SqlDbType.Int);
                _arrpara[6] = new SqlParameter("@Processid", SqlDbType.Int);
                _arrpara[7] = new SqlParameter("@Othershadefinishedid", SqlDbType.Int);
                _arrpara[8] = new SqlParameter("@Re_Process", SqlDbType.Int);
                _arrpara[9] = new SqlParameter("@GodownID", SqlDbType.Int);
                _arrpara[10] = new SqlParameter("@TagNo", SqlDbType.NVarChar, 50);

                _arrpara[0].Value = ddllotno.SelectedItem.Text;
                _arrpara[1].Value = 0;
                _arrpara[2].Value = DDCompanyName.SelectedValue;
                _arrpara[3].Direction = ParameterDirection.Output;
                _arrpara[4].Value = Session["FinishedId"];
                _arrpara[5].Value = DDProcessProgramNo.SelectedValue;
                _arrpara[6].Value = DDProcessName.SelectedValue;
                _arrpara[7].Value = TDISSUESHADE.Visible == true && variable.Carpetcompany == "1" ? ViewState["othershadefinishedid"] : "0";
                _arrpara[8].Value = chkredyeing.Checked == true ? "1" : "0";
                _arrpara[9].Value = TDGodownName.Visible == true ? DDGodownName.SelectedValue : "0";
                _arrpara[10].Value = TDDDTagNo.Visible == true ? DDTagNo.SelectedItem.Text : "";

                SqlHelper.ExecuteNonQuery(Tran, CommandType.StoredProcedure, "PRO_Stockqty", _arrpara);

                Tran.Commit();
                txtstock.Text = _arrpara[3].Value.ToString();
            }
            catch (Exception ex)
            {
                UtilityModule.MessageAlert(ex.Message, "Master/Process/GenrateInDent.aspx");
                Tran.Rollback();
            }
            finally
            {
                con.Close();
                con.Dispose();
            }
        }
    }
    private void check_qty()
    {
        double stockqty = Convert.ToDouble(txtstock.Text == "" ? "0" : txtstock.Text);
        double totalQty = Convert.ToDouble(txtTotalQty.Text == "" ? "0" : txtTotalQty.Text);
        double VarPercentQty = Convert.ToDouble(SqlHelper.ExecuteScalar(ErpGlobal.DBCONNECTIONSTRING, CommandType.Text, "Select PercentageExecssQtyForIndent from MasterSetting"));
        if (VarPercentQty <= 0.0)
        {
            VarPercentQty = Convert.ToDouble(SqlHelper.ExecuteScalar(ErpGlobal.DBCONNECTIONSTRING, CommandType.Text,
            @"Select PercentageExecssQtyForIndent 
            From ProcessProgramExcessPercentage(Nolock) Where MasterCompanyID = " + Session["varCompanyId"] + " And PPID = " + DDProcessProgramNo.SelectedValue));
        }

        totalQty = totalQty * (100.0 + VarPercentQty) / 100;
        double PreQty = Convert.ToDouble(TxtPreQty.Text == "" ? "0" : TxtPreQty.Text);
        double Qty = Convert.ToDouble(txtQty.Text == "" ? "0" : txtQty.Text);
        switch (Session["VarcompanyNo"].ToString())
        {
            case "6":
            case "12":
                if (Qty + PreQty > totalQty)
                {
                    lblMessage.Visible = true;
                    lblMessage.Text = "Qty is greater than TotalQty";
                    txtQty.Text = "";
                    txtQty.Focus();

                }
                else
                {
                    lblMessage.Visible = false;
                }
                break;
            default:
                if (Qty + PreQty > totalQty || Qty > stockqty && variable.VarGENRATEINDENTWITHOUTLOT_STOCK == "0")
                {

                    lblMessage.Visible = true;
                    lblMessage.Text = "Qty is greater than Stock or Total Qty";
                    txtQty.Text = "";
                    txtQty.Focus();

                }
                else
                {
                    lblMessage.Visible = false;
                }
                break;
        }

    }
    protected void ChkEditOrder_CheckedChanged(object sender, EventArgs e)
    {
        if (ChkForOrder.Checked == true)
        {
            if (Session["varcompanyId"].ToString() == "6")
            {
                UtilityModule.ConditionalComboFill(ref DDCustomerCode, "SELECT distinct CI.customerid,Customercode+ SPACE(5)+CompanyName as CustomerCode from customerinfo CI inner join ordermaster Om on CI.CustomerId = Om.CustomerId where OrderCategoryId=2  And  MasterCompanyId=" + Session["varCompanyId"] + " order by Customercode", true, "--SELECT--");
                if (DDCustomerCode.Items.Count > 0)
                {
                    DDCustomerCode.SelectedIndex = 1;
                    CustomerCodeSelectedChange();
                }
            }
            TDCaltype.Visible = false;
            if (Session["varcompanyId"].ToString() == "6")
            {
                TDLblReqDate.Visible = false;
            }
            TDLotNo.Visible = false;
            TDStockQty.Visible = false;
            TDLoss.Visible = false;
            TDTotalQty.Visible = false;
            TDPreQty.Visible = false;
            BtnAddRate.Visible = false;
            TDppno.Visible = false;
            LblKg.Visible = false;
            TDCustCode.Visible = true;
            TxtRate.Enabled = true;
            TDOrderNo.Visible = true;
        }
        else
        {
            LblKg.Visible = true;
            TDLblReqDate.Visible = false;
            TDOrderNo.Visible = false;
            TxtRate.Enabled = false;
            TDCustCode.Visible = false;
            TDCaltype.Visible = true;
            TDLotNo.Visible = true;
            TDStockQty.Visible = true;
            TDLoss.Visible = true;
            TDTotalQty.Visible = true;
            TDPreQty.Visible = true;
            BtnAddRate.Visible = true;
            TDppno.Visible = true;
        }
    }
    protected void DDCustomerCode_SelectedIndexChanged(object sender, EventArgs e)
    {
        CustomerCodeSelectedChange();
    }
    private void CustomerCodeSelectedChange()
    {
        if (DDCompanyName.SelectedIndex > 0 && DDCustomerCode.SelectedIndex > 0)
        {
            string str = "";
            switch (Session["varcompanyNo"].ToString())
            {
                case "7":
                    str = @"SELECT Distinct OM.OrderId,LocalOrder+ ' / ' +CustomerOrderNo 
            FROM OrderMaster OM,OrderLocalConsumption OC ,OrderProcessPlanning PP,orderdetail od,V_FinishedItemDetail v,UserRights_Category uc,PurchaseIndentIssue pii ,v_purchase_receive_report prr 
            Where om.orderid=od.orderid and od.Item_Finished_Id= v.Item_Finished_Id and v.CATEGORY_ID=uc.CategoryId and Om.status=0 and OM.OrderID=OC.OrderId and pp.orderid=om.orderid and pii.Orderid=om.orderid and prr.PIndentIssueId=pii.PIndentIssueId and pp.ProcessId=2 and pp.FinalStatus=1  and uc.userid=" + Session["varuserid"] + " And  om.Companyid=" + DDCompanyName.SelectedValue + " And Customerid=" + DDCustomerCode.SelectedValue + " And V.MasterCompanyId=" + Session["varCompanyId"];
                    break;
                case "3":
                    str = @"SELECT Distinct OM.OrderId,LocalOrder+ ' / ' +CustomerOrderNo 
            FROM OrderMaster OM,OrderLocalConsumption OC 
            Where Om.status=0 and OM.OrderID=OC.OrderId And  Companyid=" + DDCompanyName.SelectedValue + " And Customerid=" + DDCustomerCode.SelectedValue;
                    break;
                case "10":
                    str = @"SELECT Distinct OM.OrderId,LocalOrder+ ' / ' +CustomerOrderNo 
            FROM OrderMaster OM,OrderLocalConsumption OC 
            Where Om.status=0 and OM.OrderID=OC.OrderId And  Companyid=" + DDCompanyName.SelectedValue + " And Customerid=" + DDCustomerCode.SelectedValue;
                    break;
                case "6":
                    str = @"SELECT Distinct OM.OrderId,LocalOrder+ ' / ' +CustomerOrderNo 
            FROM OrderMaster OM,OrderLocalConsumption OC 
            Where Om.status=0 and OM.OrderID=OC.OrderId And  Companyid=" + DDCompanyName.SelectedValue + " And Customerid=" + DDCustomerCode.SelectedValue + " And OrderCategoryid=2";
                    break;
                default:
                    if (Session["WithoutBOM"].ToString() == "1")
                    {
                        str = @"SELECT Distinct OM.OrderId,LocalOrder+ ' / ' +CustomerOrderNo 
                                    FROM OrderMaster OM,OrderLocalConsumption OC 
                                    Where Om.status=0 and OM.OrderID=OC.OrderId And  Companyid=" + DDCompanyName.SelectedValue + " And Customerid=" + DDCustomerCode.SelectedValue;
                    }
                    else
                    {
                        str = @"SELECT Distinct OM.OrderId,LocalOrder+ ' / ' +CustomerOrderNo 
                            FROM OrderMaster OM,OrderLocalConsumption OC ,OrderProcessPlanning PP
                            Where Om.status=0 and OM.OrderID=OC.OrderId and pp.orderid=om.orderid and pp.ProcessId=2 and pp.FinalStatus=1 And  Companyid=" + DDCompanyName.SelectedValue + " And Customerid=" + DDCustomerCode.SelectedValue;
                    }
                    break;
            }
            UtilityModule.ConditionalComboFill(ref DDOrderNo, str, true, "--Select--");
        }
    }
    protected void DDOrderNo_SelectedIndexChanged(object sender, EventArgs e)
    {
        string process = "";
        //1 For Final         
        switch (Session["varcompanyid"].ToString())
        {

            case "7":
                process = "select Distinct Process_Name_Id,Process_Name From Process_Name_Master PM,OrderProcessPlanning PP where PM.Process_Name_Id=PP.ProcessId And OrderId=" + DDOrderNo.SelectedValue + " And FinalStatus=1 And PM.MasterCompanyId=" + Session["varCompanyId"] + " order by Process_Name Asc";
                break;
            default:
                process = "select Distinct Process_Name_Id,Process_Name From Process_Name_Master PM Where PM.MasterCompanyId=" + Session["varCompanyId"] + " order by Process_Name Asc";
                break;
        }

        UtilityModule.ConditionalComboFill(ref DDProcessName, process, true, "--Select Process--");
        string CateG = @"Select distinct ICM.Category_Id,ICM.Category_Name from  Item_Parameter_Master IPM  inner Join Item_Master IM on IM.Item_Id=IPM.Item_Id And IM.MasterCompanyId=" + Session["varCompanyId"] + @" inner join Item_Category_Master ICM  on 
                     ICM.Category_Id=IM.Category_Id inner join UserRights_Category UC on ICM.Category_Id=UC.CategoryId And UC.UserId=" + Session["varuserid"];
        UtilityModule.ConditionalComboFill(ref DDCategory, CateG, true, "--Select Category--");
        if (DDProcessName.Items.Count > 0)
        {

            switch (Session["varcompanyNo"].ToString())
            {
                case "7":
                    DDProcessName.SelectedValue = "2";
                    ddpurchase_change();
                    break;
            }

        }
    }
    private void CHECKVALIDCONTROL()
    {
        lblMessage.Text = "";
        lblMessage.Visible = false;
        if (UtilityModule.VALIDDROPDOWNLIST(DDCategory) == false)
        {
            goto a;
        }
        if (UtilityModule.VALIDDROPDOWNLIST(DDItem) == false)
        {
            goto a;
        }
        if (TdQuality.Visible == true)
        {
            if (UtilityModule.VALIDDROPDOWNLIST(DDQuality) == false)
            {
                goto a;
            }
        }
        if (TdDesign.Visible == true)
        {
            if (UtilityModule.VALIDDROPDOWNLIST(DDDesign) == false)
            {
                goto a;
            }
        }
        if (TdColor.Visible == true)
        {
            if (UtilityModule.VALIDDROPDOWNLIST(DDColor) == false)
            {
                goto a;
            }
        }
        if (TdColorShade.Visible == true)
        {
            if (UtilityModule.VALIDDROPDOWNLIST(DDColorShade) == false)
            {
                goto a;
            }
        }
        if (TDISSUESHADE.Visible == true)
        {
            if (UtilityModule.VALIDDROPDOWNLIST(DDISSUESHADE) == false)
            {
                goto a;
            }
        }
        if (TdShape.Visible == true)
        {
            if (UtilityModule.VALIDDROPDOWNLIST(DDShape) == false)
            {
                goto a;
            }
        }
        if (TdSize.Visible == true)
        {
            if (UtilityModule.VALIDDROPDOWNLIST(DDSize) == false)
            {
                goto a;
            }
        }
        if (UtilityModule.VALIDDROPDOWNLIST(ddUnit) == false)
        {
            goto a;
        }
        //if (UtilityModule.VALIDTEXTBOX(TxtQty) == false)
        //{
        //    goto a;
        //}
        else
        {
            goto B;
        }
    a:
        lblMessage.Visible = true;
        UtilityModule.SHOWMSG(lblMessage);
    B: ;
    }
    protected void CheckReqDate()
    {
        lblMessage1.Text = "";
        lblMessage1.Visible = false;
        DateTime dt1 = Convert.ToDateTime(TxtReqDate.Text);
        DateTime dt2 = Convert.ToDateTime(TxtDate.Text); //IssueDate 
        if (Convert.ToInt32(Session["VarcompanyNo"]) == 7)
        {
            DateTime dt3 = Convert.ToDateTime(ViewState["FinalDate"]);
            if (dt1 < dt2 || dt1 > dt3)
            {
                lblMessage1.Visible = true;
                lblMessage1.Text = "Pls Select Correct Date";
            }
        }
        else
        {
            if (dt1 < dt2)
            {
                lblMessage1.Visible = true;
                lblMessage1.Text = "Pls Select Correct Date";
            }
        }
    }
    private void fillorderdetail()
    {
        string sql = @"select od.orderdetailid,CATEGORY_NAME+'  '+ Item_Name+'  '+QualityName+'  '+Designname+'  '+ColorName+'  '+ShadeColorName As Description,Sum(QtyRequired) As Qty,CATEGORY_ID,v.ITEM_ID,QualityId,ColorId,designId,SizeId,ShapeId,ShadecolorId,OD.ORDERUNITID AS UNIT
                     From OrderMaster OM,OrderDetail OD,V_FinishedItemDetail V  where OM.OrderId=OD.OrderId 
                     And V.Item_Finished_Id=OD.Item_Finished_Id And OM.OrderId=" + DDOrderNo.SelectedValue + " And V.MasterCompanyId=" + Session["varCompanyId"] + " group by od.orderdetailid, Item_Name,QualityName,Designname,ColorName,ShadeColorName,OrderUnitId,SizeMtr,SizeFt,CATEGORY_NAME,CATEGORY_ID,v.ITEM_ID,QualityId,ColorId,designId,SizeId,ShapeId,ShadecolorId,OD.ORDERUNITID";
        DataSet ds = SqlHelper.ExecuteDataset(ErpGlobal.DBCONNECTIONSTRING, CommandType.Text, sql);
        if (ds.Tables[0].Rows.Count > 0)
        {
            dgorder.DataSource = ds;
            dgorder.DataBind();
            dgorder.Visible = true;
        }
        else
        {
            dgorder.Visible = false;
        }
    }
    protected void dgorder_SelectedIndexChanged(object sender, EventArgs e)
    {
        int r = Convert.ToInt32(dgorder.SelectedIndex.ToString());
        string category = ((Label)dgorder.Rows[r].FindControl("lblcategoryid")).Text;
        string Item = ((Label)dgorder.Rows[r].FindControl("lblitem_id")).Text;
        string Quality = ((Label)dgorder.Rows[r].FindControl("lblQualityid")).Text;
        string Color = ((Label)dgorder.Rows[r].FindControl("lblColorid")).Text;
        string design = ((Label)dgorder.Rows[r].FindControl("lbldesignid")).Text;
        string shape = ((Label)dgorder.Rows[r].FindControl("lblshapeid")).Text;
        string shadecolor = ((Label)dgorder.Rows[r].FindControl("lblshadecolorid")).Text;
        string size = ((Label)dgorder.Rows[r].FindControl("lblsizeid")).Text;
        string Qty = ((Label)dgorder.Rows[r].FindControl("lblqty")).Text;
        string orderdet = ((Label)dgorder.Rows[r].FindControl("lblorderdet")).Text;
        string UNIT = ((Label)dgorder.Rows[r].FindControl("LBLUNIT")).Text;
        string balqty = ((Label)dgorder.Rows[r].FindControl("lblbalnce")).Text;

        HNPENQTY.Value = balqty;
        hnorderid.Value = orderdet;
        Hnqty.Value = Qty;
        if (DDCategory.Visible == true)
        {
            DDCategory.SelectedValue = category;
            ddlcategorycange();
        }
        if (DDItem.Visible == true)
        {
            DDItem.SelectedValue = Item;
            DDItem_SelectedIndexChanged(sender, e);
        }
        if (DDQuality.Visible == true)
        {
            DDQuality.SelectedValue = Quality;
            DDQUALITY_CHANGED();
        }
        if (DDDesign.Visible == true)
        {
            DDDesign.SelectedValue = design;
            dddesign_changed();
        }
        if (DDColor.Visible == true)
        {
            DDColor.SelectedValue = Color;
            dddesign_changed();
        }
        if (DDColorShade.Visible == true)
        {
            DDColorShade.SelectedValue = shadecolor;
            dddesign_changed();
        }
        if (DDShape.Visible == true)
        {
            DDShape.SelectedValue = shape;
            switch (UNIT)
            {
                case "1":
                    DDsizetype.SelectedValue = "1"; //Mtr
                    break;
                case "2":
                    DDsizetype.SelectedValue = "0"; //Ft
                    break;
                case "6":
                    DDsizetype.SelectedValue = "2";//Inch
                    break;
            }
            DDShape_SelectedIndexChanged(sender, e);
            dddesign_changed();
        }
        if (DDSize.Visible == true)
        {
            DDSize.SelectedValue = size;
            dddesign_changed();
        }
        if (ddUnit.Items.Count > 0)
        {
            if ((ddUnit.Items.FindByValue(UNIT)) != null)
            {
                ddUnit.SelectedValue = UNIT;
            }
        }
        if (Convert.ToDouble(balqty) > 0)
        {
            txtQty.Text = balqty;
        }
        else
        {
            txtQty.Text = "0";
        }
    }
    protected void dgorder_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            e.Row.Attributes["onmouseover"] = "javascript:setMouseOverColor(this);";
            e.Row.Attributes["onmouseout"] = "javascript:setMouseOutColor(this);";
            e.Row.Attributes["onclick"] = ClientScript.GetPostBackClientHyperlink(this.dgorder, "Select$" + e.Row.RowIndex);
        }
    }
    public string getgiven(string strval, string Str)
    {
        string val = "";
        string qty = Convert.ToString(SqlHelper.ExecuteScalar(ErpGlobal.DBCONNECTIONSTRING, CommandType.Text, "select isnull(sum(Quantity),0) from Indentmaster IM,indentdetail ID where Im.IndentId=ID.IndentId And orderdetailid=" + strval + " And processId=" + DDProcessName.SelectedValue + ""));
        val = Convert.ToString(Convert.ToDouble(Str) - Convert.ToDouble(qty));
        return val;
    }
    protected void DGIndentDetail_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            e.Row.Attributes["onmouseover"] = "javascript:setMouseOverColor(this);";
            e.Row.Attributes["onmouseout"] = "javascript:setMouseOutColor(this);";
            e.Row.Attributes["onclick"] = ClientScript.GetPostBackClientHyperlink(this.DGIndentDetail, "Select$" + e.Row.RowIndex);
        }
        if (hncomp.Value == "7")
        {
            e.Row.Cells[2].Visible = false;
            e.Row.Cells[3].Visible = false;
            e.Row.Cells[5].Visible = false;
        }
    }
    protected void BtnPreview_Click(object sender, EventArgs e)
    {
        if (MySession.IndentAsProduction == "1")
        {
            Showreport();
            return;
        }
        if (Session["varcompanyid"].ToString() == "16" || Session["varcompanyid"].ToString() == "43")
        {
            string qry = @"select * from v_indentreportForCarpetCompany where indentid=" + ViewState["IndentId"];
            DataSet ds = SqlHelper.ExecuteDataset(ErpGlobal.DBCONNECTIONSTRING, CommandType.Text, qry);
            if (ds.Tables[0].Rows.Count > 0)
            {
                if (ChkForWithoutRate.Checked == true)
                {
                    Session["rptFileName"] = "~\\Reports\\RptIndentReportNewWithoutRate.rpt";
                }
                else
                {
                    if (Session["varcompanyid"].ToString() == "43")
                    {
                        Session["rptFileName"] = "~\\Reports\\rptindentCarpetInternational.rpt";
                    }
                    else
                    {
                        Session["rptFileName"] = "~\\Reports\\rptindentreportnew.rpt";
                    }
                }
                //Session["rptFileName"] = Session["ReportPath"];
                Session["GetDataset"] = ds;
                Session["dsFileName"] = "~\\ReportSchema\\rptindentreportnew.xsd";
                StringBuilder stb = new StringBuilder();
                stb.Append("<script>");
                stb.Append("window.open('../../ViewReport.aspx', 'nwwin', 'toolbar=0, titlebar=1,  top=0px, left=0px, scrollbars=1, resizable = yes');</script>");
                ScriptManager.RegisterClientScriptBlock(Page, GetType(), "opn", stb.ToString(), false);
            }
            else { ScriptManager.RegisterStartupScript(Page, GetType(), "opn1", "alert('No Record Found!');", true); }
        }
        else if (ChkForOrder.Checked == false)
        {

            ScriptManager.RegisterStartupScript(this.Page, this.GetType(), "ScriptRegistration", "Preview();", true);
        }
        else
        {
            string qry = @"select * from v_IndentOrderWise where indentid=" + ViewState["IndentId"] + "";
            DataSet ds = SqlHelper.ExecuteDataset(ErpGlobal.DBCONNECTIONSTRING, CommandType.Text, qry);
            if (ds.Tables[0].Rows.Count > 0)
            {
                Session["rptFileName"] = "~\\Reports\\Rptgenerateindetwithorder.rpt";
                //Session["rptFileName"] = Session["ReportPath"];
                Session["GetDataset"] = ds;
                Session["dsFileName"] = "~\\ReportSchema\\Rptgenerateindetwithorder.xsd";
                StringBuilder stb = new StringBuilder();
                stb.Append("<script>");
                stb.Append("window.open('../../ViewReport.aspx', 'nwwin', 'toolbar=0, titlebar=1,  top=0px, left=0px, scrollbars=1, resizable = yes');</script>");
                ScriptManager.RegisterClientScriptBlock(Page, GetType(), "opn", stb.ToString(), false);
            }
            else { ScriptManager.RegisterStartupScript(Page, GetType(), "opn1", "alert('No Record Found!');", true); }
        }
    }
    protected void Showreport()
    {
        if (ViewState["IndentId"].ToString() == "")
        {
            ScriptManager.RegisterStartupScript(this.Page, GetType(), "alert", "alert('Please select or Type indent No!!!');", true);
            return;
        }
        string str = "select * from [GenrateIndentReport] where indentid=" + ViewState["IndentId"];
        DataSet ds = SqlHelper.ExecuteDataset(ErpGlobal.DBCONNECTIONSTRING, CommandType.Text, str);
        if (ds.Tables[0].Rows.Count > 0)
        {

            Session["rptFileName"] = "~\\Reports\\rptgenerateindentapprovalnew.rpt";
            Session["GetDataset"] = ds;
            Session["dsFileName"] = "~\\ReportSchema\\rptgenerateindentapprovalnew.xsd";
            StringBuilder stb = new StringBuilder();
            stb.Append("<script>");
            stb.Append("window.open('../../ViewReport.aspx', 'nwwin', 'toolbar=0, titlebar=1,  top=0px, left=0px, scrollbars=1, resizable = yes');</script>");
            ScriptManager.RegisterClientScriptBlock(Page, GetType(), "opn", stb.ToString(), false);
        }
        else
        {
            ScriptManager.RegisterStartupScript(this.Page, GetType(), "opn", "alert('No records found!!!');", true);
        }
    }
    protected void GetdyingTypeswithRates()
    {
        string str;
        str = @"select DyingMatch,DyingType,Dyeing,ORate from PP_Consumption PC inner join ORDER_CONSUMPTION_DETAIL OCD
                on PC.OrderId=OCD.ORDERID and PC.OrderDetailId=OCD.ORDERDETAILID 
                and pc.FinishedId=ocd.OFINISHEDID  
                inner join ITEM_PARAMETER_MASTER IPM on IPM.ITEM_FINISHED_ID=PC.FinishedId
                where PC.PPId=" + DDProcessProgramNo.SelectedValue + " and ipm.ITEM_ID=" + DDItem.SelectedValue + " and IPM.SHADECOLOR_ID=" + DDColorShade.SelectedValue + "";
        if (TdQuality.Visible == true)
        {
            str = str + " and IPM.QUALITY_ID= " + DDQuality.SelectedValue;
        }
        DataSet ds = SqlHelper.ExecuteDataset(ErpGlobal.DBCONNECTIONSTRING, CommandType.Text, str);
        if (ds.Tables[0].Rows.Count > 0)
        {
            DDDyeing.SelectedItem.Text = ds.Tables[0].Rows[0]["Dyeing"].ToString();
            DDDyeingMatch.SelectedItem.Text = ds.Tables[0].Rows[0]["DyingMatch"].ToString(); ;
            DDDyingType.SelectedItem.Text = ds.Tables[0].Rows[0]["DyingType"].ToString();
            TxtRate.Text = ds.Tables[0].Rows[0]["ORate"].ToString();
        }
        else
        {
            DDDyeing.SelectedItem.Text = "";
            DDDyeingMatch.SelectedItem.Text = "";
            DDDyingType.SelectedItem.Text = "";
            TxtRate.Text = "";
        }
    }
    protected void DDISSUESHADE_SelectedIndexChanged(object sender, EventArgs e)
    {
        FillLotnoIssueshade();
        int VarOthershadefinishedid = UtilityModule.getItemFinishedId(DDItem, DDQuality, DDDesign, DDColor, DDShape, DDSize, TxtProdCode, DDISSUESHADE, 0, "", Convert.ToInt32(Session["varCompanyId"]));
        ViewState["othershadefinishedid"] = VarOthershadefinishedid;
    }

    protected void chkredyeing_CheckedChanged(object sender, EventArgs e)
    {
        TDISSUESHADE.Visible = false;
        if (chkredyeing.Checked == true)
        {
            TDISSUESHADE.Visible = true;
        }
    }
    protected void txtextraQty_TextChanged(object sender, EventArgs e)
    {
        QtyTextChanged();
        //Fillamount();
    }
    protected void TxtRate_TextChanged(object sender, EventArgs e)
    {
        Fillamount();
    }
    protected void BtnEmployeeWisePPDetail_Click(object sender, EventArgs e)
    {
        if (DDProcessProgramNo.SelectedIndex < 1)
        {
            ScriptManager.RegisterStartupScript(Page, GetType(), "altform12", "alert('Please select process program no')", true);
            return;
        }
        SqlConnection con = new SqlConnection(ErpGlobal.DBCONNECTIONSTRING);
        if (con.State == ConnectionState.Closed)
        {
            con.Open();
        }

        SqlCommand cmd = new SqlCommand("PRO_GET_EMPLOYEEWISE_PP_CONSUMPTION_DETAIL", con);
        cmd.CommandType = CommandType.StoredProcedure;

        cmd.Parameters.AddWithValue("@PPID", DDProcessProgramNo.SelectedValue);
        cmd.Parameters.AddWithValue("@EmpID", DDPartyName.SelectedIndex == -1 ? "0" : DDPartyName.SelectedValue);

        SqlDataAdapter ad = new SqlDataAdapter(cmd);
        DataSet ds = new DataSet();
        ad.Fill(ds);
        if (ds.Tables[0].Rows.Count == 0)
        {
            ScriptManager.RegisterStartupScript(Page, GetType(), "altform12", "alert('No data found for this selection !!!')", true);
            return;
        }
        else
        {

            if (!Directory.Exists(Server.MapPath("~/TempHrexcel/")))
            {
                Directory.CreateDirectory(Server.MapPath("~/TempHrexcel/"));
            }

            var xapp = new XLWorkbook();
            var sht = xapp.Worksheets.Add("Consmption Detail");

            int Hrow = 1;
            sht.Range("A" + Hrow).SetValue("PPNo");
            sht.Range("B" + Hrow).SetValue("Challan No");
            sht.Range("C" + Hrow).SetValue("Employee Name");
            sht.Range("D" + Hrow).SetValue("Process Name");
            sht.Range("E" + Hrow).SetValue("Item Detail");
            sht.Range("F" + Hrow).SetValue("Qty");
            sht.Range("G" + Hrow).SetValue("Extra Qty");

            sht.Range("A" + Hrow + ":G" + Hrow).Style.Font.SetBold();

            int row = Hrow + 1;
            for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
            {
                sht.Range("A" + row).SetValue(ds.Tables[0].Rows[i]["PPNo"]);
                sht.Range("B" + row).SetValue(ds.Tables[0].Rows[i]["ChallanNo"]);
                sht.Range("C" + row).SetValue(ds.Tables[0].Rows[i]["EmpName"]);
                sht.Range("D" + row).SetValue(ds.Tables[0].Rows[i]["ProcessName"]);
                sht.Range("E" + row).SetValue(ds.Tables[0].Rows[i]["Description"]);
                sht.Range("F" + row).SetValue(ds.Tables[0].Rows[i]["Qty"]);
                sht.Range("G" + row).SetValue(ds.Tables[0].Rows[i]["ExtraQty"]);
                row = row + 1;
            }
            //******SAVE FILE
            sht.Columns(1, 15).AdjustToContents();
            sht.Range("F" + Hrow).Style.Alignment.WrapText = true;
            sht.Range("F" + Hrow).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
            sht.Range("G" + Hrow).Style.Alignment.WrapText = true;
            sht.Range("G" + Hrow).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

            using (var a = sht.Range("A1" + ":G" + row))
            {
                a.Style.Border.BottomBorder = XLBorderStyleValues.Thin;
                a.Style.Border.TopBorder = XLBorderStyleValues.Thin;
                a.Style.Border.RightBorder = XLBorderStyleValues.Thin;
                a.Style.Border.LeftBorder = XLBorderStyleValues.Thin;
            }

            //****************************
            string Path = "";
            string Fileextension = "xlsx";
            string filename = UtilityModule.validateFilename("EmployeeWisePP_ConsumptionDetail" + DateTime.Now + "." + Fileextension);
            Path = Server.MapPath("~/Tempexcel/" + filename);
            xapp.SaveAs(Path);
            xapp.Dispose();
            //Download File
            Response.ClearContent();
            Response.ClearHeaders();
            // Response.Clear();
            Response.ContentType = "application/vnd.ms-excel";
            Response.AddHeader("content-disposition", "attachment;filename=" + filename);
            Response.WriteFile(Path);
            // File.Delete(Path);
            Response.End();
        }
    }
    protected void DyeingTypeTrueorfalse()
    {
        switch (Session["varcompanyid"].ToString())
        {
            case "4":
                TDDyeingMatch.Visible = true;
                TDDyeing.Visible = true;
                TDDyingType.Visible = true;
                break;
            case "16":
                TDDyingType.Visible = false;
                TDDyeing.Visible = false;
                TDDyeingMatch.Visible = true;
                DDDyeingMatch.Enabled = true;
                break;
            default:
                break;
        }
    }
    protected void BtnNew_Click(object sender, EventArgs e)
    {
        Response.RedirectLocation = "../../GenrateInDent.aspx";
    }
    protected void TxtProdCode_TextChanged(object sender, EventArgs e)
    {
        DataSet ds;
        string Str;
        if (TxtProdCode.Text != "")
        {
            string strcategory = "select distinct ICM.Category_Id,ICM.Category_Name from Order_Consumption_Detail OCD inner join ProcessProgram PP on OCD.OrderId=PP.Order_Id inner join Item_Parameter_Master IPM on IPM.Item_Finished_Id=OCD.OFinishedId inner Join Item_Master IM on IM.Item_Id=IPM.Item_Id inner join Item_Category_Master ICM on ICM.Category_Id=IM.Category_Id inner join UserRights_Category UC on(ICM.Category_Id=UC.CategoryId And UC.UserId=" + Session["varuserid"] + ")  where PP.PPId=" + DDProcessProgramNo.SelectedValue + " And IM.MasterCompanyId=" + Session["varCompanyId"];
            UtilityModule.ConditionalComboFill(ref DDCategory, strcategory, true, "--Select Category--");
            Str = "select IPM.*,IM.Category_Id,OQty QTY,ORate Rate from Order_Consumption_Detail OCD inner join ProcessProgram PP on OCD.OrderId=PP.Order_Id inner join Item_Parameter_Master IPM on IPM.Item_Finished_Id=OCD.OFinishedId inner join ITEM_MASTER IM ON IPM.ITEM_ID=IM.ITEM_ID  where PP.PPId=" + DDProcessProgramNo.SelectedValue + " and IPM.ProductCode='" + TxtProdCode.Text + "' And IM.MasterCompanyId=" + Session["varCompanyId"];
            ds = SqlHelper.ExecuteDataset(ErpGlobal.DBCONNECTIONSTRING, CommandType.Text, Str);
            if (ds.Tables[0].Rows.Count > 0)
            {
                DDCategory.SelectedValue = ds.Tables[0].Rows[0]["CATEGORY_ID"].ToString();
                ddlcategorycange();
                string stritem = "select distinct IM.Item_Id,IM.Item_Name from PP_Consumption OCD inner join ProcessProgram PP on OCD.OrderId=PP.Order_Id inner join Item_Parameter_Master IPM on IPM.Item_Finished_Id=OCD.FinishedId inner Join Item_Master IM on IM.Item_Id=IPM.Item_Id inner join Item_Category_Master ICM on ICM.Category_Id=IM.Category_Id where PP.PPId=" + DDProcessProgramNo.SelectedValue + " and  IM.Category_Id=" + DDCategory.SelectedValue + " And IM.MasterCompanyId=" + Session["varCompanyId"];
                UtilityModule.ConditionalComboFill(ref DDItem, stritem, true, "---Select Item----");
                DDItem.SelectedValue = ds.Tables[0].Rows[0]["ITEM_ID"].ToString();
                string strquality = "select distinct Q.QualityId,QualityName from PP_Consumption OCD inner join ProcessProgram PP on OCD.OrderId=PP.Order_Id inner join Item_Parameter_Master IPM on IPM.Item_Finished_Id=OCD.FinishedId inner Join Item_Master IM on IM.Item_Id=IPM.Item_Id inner join Quality Q on Q.QualityId=IPM.Quality_Id where PP.PPId=" + DDProcessProgramNo.SelectedValue + " and IM.Item_Id=" + DDItem.SelectedValue + " And IM.MasterCompanyId=" + Session["varCompanyId"];
                UtilityModule.ConditionalComboFill(ref DDQuality, strquality, true, "--Select Quality--");
                ComboFill();
                DDQuality.SelectedValue = ds.Tables[0].Rows[0]["QUALITY_ID"].ToString();
                DDDesign.SelectedValue = ds.Tables[0].Rows[0]["DESIGN_ID"].ToString();
                DDColor.SelectedValue = ds.Tables[0].Rows[0]["COLOR_ID"].ToString();
                DDColorShade.SelectedValue = ds.Tables[0].Rows[0]["ShadeColor_Id"].ToString();
                DDShape.SelectedValue = ds.Tables[0].Rows[0]["SHAPE_ID"].ToString();
                UtilityModule.ConditionalComboFill(ref DDSize, "SELECT SIZEID,SIZEFT fROM SIZE WhERE SHAPEID=" + DDShape.SelectedValue + " And MasterCompanyId=" + Session["varCompanyId"] + "", true, "--SELECT--");
                DDSize.SelectedValue = ds.Tables[0].Rows[0]["SIZE_ID"].ToString();
                Fill_Quantity();
            }
            else
            {
                lblMessage.Text = "ITEM CODE DOES NOT EXISTS....";
                DDCategory.SelectedIndex = 0;
                ddlcategorycange();
                TxtProdCode.Text = "";
                TxtProdCode.Focus();
            }
        }
        else
        {
            DDCategory.SelectedIndex = 0;
            ddlcategorycange();
        }
    }
    protected void refreshEmp_Click(object sender, EventArgs e)
    {
        UtilityModule.ConditionalComboFill(ref DDPartyName, "select EI.EmpId,EmpName from EmpInfo EI inner join EmpProcess EP on EI.EmpId=EP.EmpId where processId=" + DDProcessName.SelectedValue + " And EI.MasterCompanyId=" + Session["varCompanyId"] + " order by ei.empname", true, "--Select--");
    }

    private void FillGodownName()
    {
        int color = 0;
        int quality = 0;
        int design = 0;
        int shape = 0;
        int size = 0;
        int shadeColor = 0;
        if ((TdQuality.Visible == true && DDQuality.SelectedIndex > 0) || TdQuality.Visible != true)
        {
            quality = 1;
        }
        if (TdDesign.Visible == true && DDDesign.SelectedIndex > 0 || TdDesign.Visible != true)
        {
            design = 1;
        }
        if (TdColor.Visible == true && DDColor.SelectedIndex > 0 || TdColor.Visible != true)
        {
            color = 1;
        }
        if (TdShape.Visible == true && DDShape.SelectedIndex > 0 || TdShape.Visible != true)
        {
            shape = 1;
        }
        if (TdSize.Visible == true && DDSize.SelectedIndex > 0 || TdSize.Visible != true)
        {
            size = 1;
        }
        if (TdColorShade.Visible == true && DDColorShade.SelectedIndex > 0 || TdColorShade.Visible != true)
        {
            shadeColor = 1;
        }
        if (quality == 1 && design == 1 && color == 1 && shape == 1 && size == 1 && shadeColor == 1)
        {

            int finishedid = Convert.ToInt32(UtilityModule.getItemFinishedId(DDItem, DDQuality, DDDesign, DDColor, DDShape, DDSize, TxtProdCode, DDColorShade, 0, "", Convert.ToInt32(Session["varCompanyId"])));
            string str = string.Empty;
            if (Session["varcompanyNo"].ToString() == "22")
            {
                str = @"Select Distinct GM.GodownID, GM.GodownName 
                From ProcessProgram PR(Nolock)
                JOIN ORDER_CONSUMPTION_DETAIL OCD(Nolock) ON OCD.ORDERID = PR.Order_ID And OCD.OFINISHEDID = " + finishedid + @" 
                JOIN Stock S(Nolock) ON S.ITEM_FINISHED_ID = OCD.IFINISHEDID 
                JOIN GodownMaster GM (Nolock) ON GM.GoDownID = S.GodownID 
                JOIN  Godown_Authentication GA(NoLock) ON GM.GoDownID=GA.GodownID                               
                Where PR.PPID = " + DDProcessProgramNo.SelectedValue + " and GM.MasterCompanyId=" + Session["varCompanyId"] + @" and GA.UserId=" + Session["VarUserId"] + @" And S.Companyid = " + DDCompanyName.SelectedValue;
            }
            else
            {
                str = @"Select Distinct GM.GodownID, GM.GodownName 
                From ProcessProgram PR(Nolock)
                JOIN ORDER_CONSUMPTION_DETAIL OCD(Nolock) ON OCD.ORDERID = PR.Order_ID And OCD.OFINISHEDID = " + finishedid + @" 
                JOIN Stock S(Nolock) ON S.ITEM_FINISHED_ID = OCD.IFINISHEDID 
                JOIN GodownMaster GM (Nolock) ON GM.GoDownID = S.GodownID 
                JOIN GodownWiseEmp GE(Nolock) ON GE.GodownID = GM.GodownID And GE.EmpID = " + DDPartyName.SelectedValue + @" 
                Where PR.PPID = " + DDProcessProgramNo.SelectedValue + @" And S.Companyid = " + DDCompanyName.SelectedValue;
            }
            if (MySession.Stockapply == "True")
            {
                str = str + " And Round(S.Qtyinhand, 3) > 0 ";
            }
            UtilityModule.ConditionalComboFill(ref DDGodownName, str, true, "--Select--");
        }
    }
    protected void DDGodownName_SelectedIndexChanged(object sender, EventArgs e)
    {
        FillLotNo();
    }
    private void FillLotNo()
    {
        string str = "";
        DataSet ds;

        if (variable.ORDER_STOCK_ASSIGN == "1")
        {
            str = @"Select Distinct OSA.LotNo, OSA.LotNo 
                                From ProcessProgram PP(Nolock) 
                                JOIN OrderStockAssign OSA(Nolock) ON OSA.OrderID = PP.Order_ID 
                                JOIN V_FinishedItemDetail VF(Nolock) ON VF.ITEM_FINISHED_ID = OSA.FinishedID And VF.ITEM_ID = " + DDItem.SelectedValue + @" And 
                                            VF.QualityId = " + DDQuality.SelectedValue + "  And VF.ShadecolorId = " + DDISSUESHADE.SelectedValue + @" 
                                Where PP.PPID = " + DDProcessProgramNo.SelectedValue;

            UtilityModule.ConditionalComboFill(ref ddllotno, str, true, "--Select--");
        }
        else
        {
            if (Session["varcompanyNo"].ToString() == "6")
            {
                str = @"select Distinct lotno,lotno From Stock 
                Where Item_Finished_id in(Select IFinishedid 
                        From Order_Consumption_Detail 
                        Where OrderId in(select Order_Id from ProcessProgram Where PPID=" + DDProcessProgramNo.SelectedValue + ") And OFInishedid= " + Session["FinishedId"] + ") and CompanyId=" + DDCompanyName.SelectedValue + "";
                ds = SqlHelper.ExecuteDataset(ErpGlobal.DBCONNECTIONSTRING, CommandType.Text, str);
                if (ds.Tables[0].Rows.Count > 0)
                {
                    UtilityModule.ConditionalComboFill(ref ddllotno, @"select Distinct lotno,lotno From Stock 
                    Where Item_Finished_id in(select IFInishedid from Order_Consumption_Detail 
                            Where OrderId in(select Order_id from ProcessProgram where PPID=" + DDProcessProgramNo.SelectedValue + ") And OFInishedid=" + Session["FinishedId"] + ") And CompanyId=" + DDCompanyName.SelectedValue + "", true, "select");
                }
                else
                {
                    UtilityModule.ConditionalComboFill(ref ddllotno, "select 1,1", true, "select");
                }
            }
            else
            {
                if (variable.Carpetcompany == "1" && variable.VarDyeingIssueOthershade == "1" && DDProcessName.SelectedItem.Text.ToUpper() == "DYEING")
                {
                    str = @"select Distinct S.lotno,S.lotno From stock S inner Join V_FinishedItemDetail vf on s.ITEM_FINISHED_ID=vf.ITEM_FINISHED_ID
                                Where S.Companyid=" + DDCompanyName.SelectedValue + " and  vf.ITEM_ID=" + DDItem.SelectedValue + @" And 
                                Vf.QualityId=" + DDQuality.SelectedValue + " and vf.ShadecolorId=" + DDISSUESHADE.SelectedValue;
                    if (MySession.Stockapply == "True")
                    {
                        str = str + " And Round(S.Qtyinhand,3)>0";
                    }
                    if (MasterCompanyId == 22)
                    {
                        str = str + " and S.Godownid in(" + DDGodownName.SelectedValue + ")";

                    }
                    else
                    {
                        if (chkredyeing.Checked == false)
                        {
                            str = str + " and S.Godownid in(" + variable.VarGENERATEINDENTGODOWNID + ")";
                        }
                    }

                    UtilityModule.ConditionalComboFill(ref ddllotno, str, true, "--Select--");
                }
                else
                {
                    str = @"select distinct Lotno,lotno 
                        From stock s(Nolock) 
                        join ORDER_CONSUMPTION_DETAIL OCD(Nolock) on S.ITEM_FINISHED_ID=OCD.IFINISHEDID 
                        join ProcessProgram(Nolock) PR on OCD.ORDERID=pr.Order_ID 
                        where pr.PPID=" + DDProcessProgramNo.SelectedValue + " and ocd.OFINISHEDID=" + Session["FinishedId"] + @" and 
                        Companyid=" + DDCompanyName.SelectedValue;

                    if (MySession.Stockapply == "True")
                    {
                        str = str + " and Round(S.qtyinhand,3)>0";
                    }
                    if (MasterCompanyId == 42 || MasterCompanyId == 22)
                    {
                        str = str + " and S.Godownid = " + DDGodownName.SelectedValue;
                    }
                    else
                    {
                        if (chkredyeing.Checked == false)
                        {
                            str = str + " and S.Godownid in(" + variable.VarGENERATEINDENTGODOWNID + ")";
                        }
                    }
                    UtilityModule.ConditionalComboFill(ref ddllotno, str, true, "--Select--");
                }
            }
        }
    }
    protected void FillLotnoIssueshade()
    {
        string str = "";
        str = @"select Distinct S.lotno,S.lotno From stock S inner Join V_FinishedItemDetail vf on s.ITEM_FINISHED_ID=vf.ITEM_FINISHED_ID
                Where S.Companyid=" + DDCompanyName.SelectedValue + " and  vf.ITEM_ID=" + DDItem.SelectedValue + " and Vf.QualityId=" + DDQuality.SelectedValue + " and vf.ShadecolorId=" + DDISSUESHADE.SelectedValue;

        if (MySession.Stockapply == "True")
        {
            str = str + " and Round(S.Qtyinhand,3)>0";
        }
        if (chkredyeing.Checked == false)
        {
            str = str + " and Godownid in(" + variable.VarGENERATEINDENTGODOWNID + ")";
        }
        UtilityModule.ConditionalComboFill(ref ddllotno, str, true, "--Select--");
    }

    //---------------------------------------Product code autocomplete--------------
    [System.Web.Services.WebMethodAttribute(), System.Web.Script.Services.ScriptMethodAttribute()]
    public static string[] GetQuality(string prefixText, int count)
    {
        SqlConnection con = new SqlConnection(ErpGlobal.DBCONNECTIONSTRING);
        con.Open();
        string strQuery = "Select ProductCode from ITEM_PARAMETER_MASTER IPM inner join item_Master IM on IM.Item_Id=IPM.Item_Id inner join CategorySeparate CS on CS.CategoryId=IM.Category_Id  where id=0 and ProductCode Like  '" + prefixText + "%' And IM.MasterCompanyId=" + MasterCompanyId;
        //string strQuery = "Select ProductCode from ITEM_PARAMETER_MASTER  where ProductCode Like  '" + prefixText + "%'";
        DataSet ds = new DataSet();
        SqlDataAdapter da = new SqlDataAdapter(strQuery, con);
        da.Fill(ds);
        count = ds.Tables[0].Rows.Count;
        con.Close();
        List<string> ProductCode = new List<string>();
        for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
        {
            ProductCode.Add(ds.Tables[0].Rows[i][0].ToString());
        }
        con.Close();
        return ProductCode.ToArray();
    }
    protected void DDTagNo_SelectedIndexChanged(object sender, EventArgs e)
    {
        LotNoSelectedIndexChanged();
    }
    protected void BtnMaterialIssueOnIndent_Click(object sender, EventArgs e)
    {
         lblMessage.Text = "";
        if (lblMessage.Text == "")
        {
            SqlConnection con = new SqlConnection(ErpGlobal.DBCONNECTIONSTRING);
            con.Open();
            SqlTransaction tran = con.BeginTransaction();
            try
            {
                SqlParameter[] arr = new SqlParameter[29];
                arr[0] = new SqlParameter("@IndentId", SqlDbType.Int);
                arr[1] = new SqlParameter("@CompanyID", SqlDbType.Int);
                arr[2] = new SqlParameter("@UserId", SqlDbType.Int);
                arr[3] = new SqlParameter("@MasterCompanyId", SqlDbType.Int);
                arr[4] = new SqlParameter("@MSG", SqlDbType.VarChar, 100);                

                arr[0].Value = ViewState["IndentId"];
                arr[1].Value = DDCompanyName.SelectedValue;
                arr[2].Value = Session["VarUserId"];
                arr[3].Value = Session["VarCompanyNo"];
                arr[4].Direction = ParameterDirection.Output;                

                SqlHelper.ExecuteNonQuery(tran, CommandType.StoredProcedure, "[PRO_MaterialIssueOnIndentAutomatically]", arr);
                lblMessage.Visible = true;
                lblMessage.Text = arr[4].Value.ToString();
                tran.Commit();                
            }
            catch (Exception ex)
            {
                lblMessage.Visible = true;
                lblMessage.Text = ex.Message;
                tran.Rollback();
            }
            finally
            {
                con.Close();
                con.Dispose();
            }
        }
    }
}