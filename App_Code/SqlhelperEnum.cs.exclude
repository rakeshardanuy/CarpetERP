using System;
using System.Collections.Generic;
using System.Text;
using System.Data.SqlClient;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web.UI.WebControls;/// <summary>
/// Summary description for SqlhelperEnum
/// </summary>
/// 

public static class SqlhelperEnum
{
    public static DataSet gvarMasterData = new DataSet();
    public const string BLANK_ITEM_ID = "-1";
    public static DataTable ToTable(this AllEnums.MasterTables enTable)
    {
        return gvarMasterData.Tables[enTable.ToString()];
    }
    public static void RefreshTable(this AllEnums.MasterTables enTable)
    {
        LoadATable(enTable);
    }

    public static void LoadMasters()
    {
        foreach (AllEnums.MasterTables enTable in Enum.GetValues(typeof(AllEnums.MasterTables)))
        { enTable.RefreshTable(); }
    }

    //Load a table in the dataset
    //public static void LoadATable(AllEnums.MasterTables p_Table, string pWhereClause = "")
    //{
    //    //m_cmd.CommandType = CommandType.TableDirect
    //    SqlConnection con = new SqlConnection(ErpGlobal.DBCONNECTIONSTRING);
    //    if (con.State == ConnectionState.Closed)
    //    {
    //        con.Open();
    //    }
    //    if (gvarMasterData.Tables.Contains(p_Table.ToString()))
    //        gvarMasterData.Tables.Remove(p_Table.ToString());

    //    // DataTable dtNew = SqlHelper.ExecuteNonQuery(con, CommandType.Text, "select * from " + p_Table.ToString() + (string.IsNullOrEmpty(pWhereClause) ? "" : " Where " + pWhereClause));
    //    DataTable dtNew = new DataTable();
    //    SqlCommand cmd = new System.Data.SqlClient.SqlCommand();
    //    cmd.CommandType = CommandType.Text;
    //    cmd.Connection = con;
    //    cmd.CommandText = "select * from " + p_Table.ToString() + (string.IsNullOrEmpty(pWhereClause) ? "" : " Where " + pWhereClause + "");
    //    SqlDataAdapter ad = new SqlDataAdapter(cmd);
    //    ad.Fill(dtNew);
    //    ad.Dispose();
    //    ad = null;
    //    dtNew.TableName = p_Table.ToString();
    //    gvarMasterData.Tables.Add(dtNew);

    //    if (con.State == ConnectionState.Open)
    //    {
    //        con.Dispose();
    //        con.Close();
    //    }
    //    //, p_Table.ToString()));

    //}
    public static void LoadATable(Enum p_Table, string pWhereClause = "")
    {
        //m_cmd.CommandType = CommandType.TableDirect
        string tblName = p_Table.ToString();
        if (gvarMasterData.Tables.Contains(tblName))
        {
            gvarMasterData.Tables.Remove(tblName);
        }
        DataTable dtNew = ExecuteQuery("select * from " + tblName + (string.IsNullOrEmpty(pWhereClause) ? "" : " Where " + pWhereClause));
        dtNew.TableName = tblName;
        gvarMasterData.Tables.Add(dtNew);
    }
    public enum QueryType
    {
        Scaler,
        Data,
        NoData,
        DataSet
    }
    //it will excute query and return datatable
    public static dynamic ExecuteQuery(string cmdText, QueryType qType = QueryType.Data, SqlParameter[] p_Parameters = null)
    {
        dynamic dtTemp = null;
        SqlConnection con = new SqlConnection(ErpGlobal.DBCONNECTIONSTRING);
        try
        {

            if (con.State == ConnectionState.Closed)
            { con.Open(); }
            SqlCommand cmd = new System.Data.SqlClient.SqlCommand();
            cmd.Connection = con;
            cmd.CommandTimeout = 100;
            if (p_Parameters != null)
            {
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddRange(p_Parameters);
            }
            else
            {
                cmd.CommandType = CommandType.Text;
            }
            cmd.CommandText = cmdText;

            switch (qType)
            {
                case QueryType.Data:
                    dtTemp = new DataTable();
                    SqlDataAdapter ad = new SqlDataAdapter(cmd);
                    ad.Fill(dtTemp);
                    ad.Dispose();
                    ad = null;
                    //dtTemp.Load(cmd.ExecuteReader());
                    break;
                case QueryType.NoData:
                    cmd.ExecuteNonQuery();
                    break;
                case QueryType.Scaler:
                    dtTemp = cmd.ExecuteScalar();
                    break;

            }
            cmd.Dispose();
            cmd = null;
            return dtTemp;
        }
        catch (Exception ex) { return null; }
        finally
        {
            con.Dispose();
            con.Close();

        }

    }

    public static void FillDropDown(this AllEnums.MasterTables enTable, DropDownList pList,
                                      string pQuery = "", string pWhere = "", string pID = "ID", string pName = "Name",
                                       bool pFillBlank = false, string pSelectedID = "", bool pSort = false, string Selecttext = "", string PsortName = "")
    {

        pList.Items.Clear();
        DataRow[] rows;
        if (pQuery == "")
        {
            if (pSort)
            {
                enTable.ToTable().DefaultView.Sort = PsortName;
                rows = enTable.ToTable().DefaultView.ToTable().Select(pWhere);
            }
            else
            {

                rows = enTable.ToTable().Select(pWhere);
            }
        }
        else
            rows = ExecuteQuery(pQuery).Select("");

        if (pFillBlank && Selecttext != "")
            pList.Items.Add(new ListItem(Selecttext, "0"));


        foreach (DataRow row in rows)
        {
            pList.Items.Add(new ListItem(row[pName].ToString(), row[pID].ToString()));
        }
        try
        {
            // pList.SelectedValue = pSelectedID;
        }
        catch (Exception ex) { }
    }


    public static void FillCheckBoxlist(this AllEnums.MasterTables enTable, CheckBoxList pList,
                                          string pQuery = "", string pWhere = "", string pID = "ID", string pName = "Name",
                                           bool pFillBlank = false, string pSelectedID = "", bool pSort = true, string Selecttext = "")
    {

        pList.Items.Clear();
        DataRow[] rows;
        if (pQuery == "")
        {
            if (pSort)
            {
                enTable.ToTable().DefaultView.Sort = pName;
                rows = enTable.ToTable().DefaultView.ToTable().Select(pWhere);
            }
            else
            {

                rows = enTable.ToTable().Select(pWhere);
            }
        }
        else
            rows = ExecuteQuery(pQuery).Select("");

        if (pFillBlank && Selecttext != "")
            pList.Items.Add(new ListItem(Selecttext, BLANK_ITEM_ID));


        foreach (DataRow row in rows)
        {
            pList.Items.Add(new ListItem(row[pName].ToString(), row[pID].ToString()));
        }
        try
        {
            // pList.SelectedValue = pSelectedID;
        }
        catch (Exception ex) { }
    }
}
